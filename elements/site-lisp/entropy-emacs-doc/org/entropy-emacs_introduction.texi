\input texinfo    @c -*- texinfo -*-
@c %**start of header
@setfilename entropy-emacs_introduction.info
@settitle entropy emacs introduction
@documentencoding UTF-8
@documentlanguage en
@c %**end of header

@finalout
@titlepage
@title entropy emacs introduction
@author Entropy
@end titlepage

@contents

@ifnottex
@node Top
@top entropy emacs introduction

@image{../annex/img/logo,,,,png}
@end ifnottex

@menu
* Preface::
* Repo folder struct::
* Main config files::
* Self built packages::
* Eemacs top-key map::
* Eemacs hdyra hollow::
* Custom @samp{entropy-emacs}::
* Hacking for @samp{entropy-emacs}::
* Config feature specifiction introduction::
* Docs refers::

@detailmenu
--- The Detailed Node Listing ---

Config feature specifiction introduction

* Internal basic setting specific::
* Major modes for programming::
* Packages enhancements and introduction::
* Emacs on windows::

Internal basic setting specific

* Windows configuration and workspace defination::
* Modeline themes toggle::
* Chinse input method::
* Globally readonly mode::
* Org-mode::
* Miscellaneous emacs internal setting::
* Font specific::

Windows configuration and workspace defination

* Eyebrowse::
* Buffer or Window switching::

Chinse input method

* PYIM::
* EMACS-RIME::

Major modes for programming

* C and C++::
* Php::
* Html and Css::
* Javascript::
* Web front-end realtime previewer::
* Python::

Packages enhancements and introduction

* Ivy and Helm::
* Emacs-W3m::
* Elfeed::
* Gnus::

Emacs on windows

* Bash and unix tool chains for windows::
* Portable emacs environment on windows::
* Notice for key touching on windows::

@end detailmenu
@end menu

@node Preface
@chapter Preface

Entropy emacs was one personal emacs config built for me at the
begining and derived from @uref{https://github.com/seagle0128/.emacs.d, centaur emacs} which was one simple pure and
with sets of mordern emacs extension tracking on.

@quotation
@samp{entropy-emacs} was based on the commit of @samp{centaur-emacs} by
@samp{55b07da55415b48ee75cde67a3f99dd80f3bb491}

@end quotation

But with the time when @samp{entropy-emacs} grown up after one year, it's
seems like it can be sharing for some newbies falling with emacs as be
aimed to brought up the easiest way of using or working based on
emacs. Along the way, I came for built it with thus on.

@node Repo folder struct
@chapter Repo folder struct

@samp{entropy-emacs} has the implicit repo dir struct as the aim for built
repo with the constant traditional repo style among with other project
dir struct used by myself.

In the root node, it be with three folder: annex, stuff, elements.

This three folder has their own meaning respectively, all of them was
created as the part of one normal project I used/created, thus for:

@itemize
@item
@strong{annex:} stored auxiliaries used by @samp{entropy-emacs}.

@item
@strong{stuff}: stored logs and temporarily stuffs produced by
@samp{entropy-emacs} or where redirecting emacs builtin stuffs into.

@item
@strong{elements:} the main elements (elements consists of
@samp{entropy-emacs}) stored location.
@end itemize


What for more?

This repo dir struct designation was just use these three based rules
without any of other restriction which show that arbitray layouts
adding was permitted.

@node Main config files
@chapter Main config files

@samp{entropy-emacs} host configs file divided into four categories within
ordered priority, i.e. the initial level @strong{Initial}, the core APIs
collection @strong{Wasteland} , the dispatcher level @strong{Baron} and the
functional recipes @strong{Tentacles}.

The @strong{Initial} category served for initializing all customizable
specifications, and provide sets of essential APIs for the rest
levels.

The @strong{Wasteland} category served for giving a basic apis i.e. native
variables defination, functions and macros, and the defined frameworks
used for building its variants that reducing duplicated partial
creates.

The @strong{Baron} category served as a bridge between the @strong{Initial} category
level and the follow @strong{Tentacles} category level. It used @strong{Initial}
part's customization to invoking the tentacles under the user
specified initialization choice and creates the basic unified
platforms for those rest parts to implement the instances.

@strong{Baron} category has five sub-categories that listed as:

@enumerate
@item
@strong{utils} : The basic third-party APIs provision. These APIs are
internally required for the rest part and obtained from others
packages mainly getted from some open-source communities.

File:  @samp{entropy-emacs-utils.el}

@item
@strong{summon} : The basic emacs extensions management institution.

Files:
@multitable {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem file
@tab description
@item @samp{entropy-emacs-packages.el}
@tab the emacs `package.el' second wrapper
@item @samp{entropy-emacs-package-requirements.el}
@tab the forced elisp extensions requirements
@item @samp{entropy-emacs-ext.el}
@tab other extensions get methods for specified archive type
@item @samp{entropy-emacs-coworker.el}
@tab get required stuffs did from arbitray type
@end multitable

@item
@strong{startup} : The @samp{entropy-emacs} specified emacs UI, emacs session
enviroment initialization processors.

Files:
@multitable {aaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem file
@tab description
@item @samp{entropy-emacs-startup.el}
@tab the top dispacher for startup
@item @samp{entropy-emacs-ui.el}
@tab the startup UI presentation
@item @samp{entropy-emacs-font-set.el}
@tab the startup font settings
@item @samp{entropy-emacs-path.el}
@tab the startup @samp{$PATH} environment initialization
@item
@tab
@end multitable

@item
@strong{batch} : The cli interface for @samp{entropy-emacs}, file
@samp{entropy-emacs-batch.el}.

@item
@strong{hollow} : The unified functional platform which needs tentacles to
adding their own seeds.

@multitable {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem file
@tab description
@item @samp{entropy-emacs-hydra-hollow.el}
@tab the pretty hydra platform
@item @samp{entropy-emacs-window-parameter-memory.el}
@tab the window parameter persist platform
@end multitable
@end enumerate


For now, the @strong{Initial} part was injected by one file i.e.
@samp{entropy-emaacs-defcustom.el}, and the @strong{Wasteland} part are hosted in
follow four files:

@enumerate
@item
The basic var binds
@enumerate
@item
@samp{entropy-emacs-defvar.el} : All pre-defined internal dynamic variables.
@item
@samp{entropy-emacs-defconst.el} : All native const variables.
@end enumerate

@item
The basic functional binds
@enumerate
@item
@samp{entropy-emacs-defun.el} : All pre-defined functions, macros, and frameworks.
@item
@samp{entropy-emacs-message.el} : The @samp{entropy-emacs} basic echoing
functional parts, it provides the unified interaction and
non-interaction @emph{message} APIs.
@item
@samp{entropy-emacs-syntax} : The @samp{entropy-emacs} basic emacs syntax
parser APIs. Used emacs underline primitives as subroutines and
extended them.
@end enumerate
@end enumerate

For file named convention, @samp{entropy-emacs-xxx.el} files are named with
'xxx' as the suffix for distinguishing with each other, for
convenience, suffix of them were point to their configuration aiming
directly, such as @samp{entropy-emacs-org.el}'s suffix @samp{org} was implicit
it's the config file for feature @samp{org-mode}, and so as on for others
config files.

The last, @strong{Tentacles} category served for implementing individual
aimings that the following table illustrates those tentacles and their
descriptions:

@multitable {aaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem @strong{Category}
@tab @strong{init package}
@tab @strong{package description}
@item
@tab entropy-emacs-themes.el
@tab theme collections and startup default theme sets
@item basic-ui
@tab entropy-emacs-modeline.el
@tab modeline themes collection and default modeline theme setes
@item
@tab
@tab
@item basic-config
@tab entropy-emacs-basic.el
@tab basic setting for @samp{entropy-emacs}
@item
@tab
@tab
@item
@tab entropy-emacs-wc.el
@tab The emacs window moving and workaround emulator configuration
@item window conigurations
@tab entropy-emacs-popwin.el
@tab The popuped window procedure implementation
@item
@tab
@tab
@item interactive chains
@tab entropy-emacs-ivy.el
@tab @uref{https://github.com/abo-abo/swiper, ivy} mode configs and others refer enhancements
@item
@tab
@tab
@item
@tab entropy-emacs-org.el
@tab emacs org mode configs
@item
@tab entropy-emacs-markdown.el
@tab emacs markdown mode configs
@item
@tab entropy-emacs-c.el
@tab C/C++ mode configs
@item
@tab entropy-emacs-lisp.el
@tab Emacs Lisp configs
@item major-modes
@tab entropy-emacs-web.el
@tab web mode (web front/back end) configs (inclues js css html php)
@item
@tab entropy-emacs-python.el
@tab Python lang config
@item
@tab entropy-emacs-lua.el
@tab Lua lang configs
@item
@tab entropy-emacs-rust.el
@tab Rust lang configs
@item
@tab entropy-emacs-go.el
@tab Go lang configs
@item
@tab entropy-emacs-yaml.el
@tab Yaml lang configs
@item
@tab entropy-emacs-codeserver.el
@tab the dashboard for language server initialization
@item IDE emulation
@tab entropy-emacs-company.el
@tab @uref{https://github.com/company-mode/company-mode, company-mode} confifs and other refer enhancements
@item
@tab entropy-emacs-yas.el
@tab @uref{https://github.com/joaotavora/yasnippet, yasnippet for emacs} configs and other refer enhancements
@item
@tab
@tab
@item
@tab entropy-emacs-shell.el
@tab emacs internal shell front-end enhancements
@item tool-chains
@tab entropy-emacs-vcs.el
@tab git/svn codes version control with @samp{magit}
@item
@tab entropy-emacs-structure.el
@tab programme editting structs fold/expanding feature package
@item
@tab entropy-emacs-highlight.el
@tab codes snippet highlighting guide feature provider
@item
@tab entropy-emacs-zeal.el
@tab external api query prompt powerd by external tool @uref{https://github.com/zealdocs/zeal, zeal}
@item
@tab
@tab
@item entertainments
@tab entropy-emacs-music.el
@tab gnu emms as media play control panel @samp{entropy-emacs} specifics
@item
@tab entropy-emacs-game.el
@tab emacs internal game setting config optimization
@item
@tab
@tab
@end multitable

@node Self built packages
@chapter Self built packages

As the default, elpa packages was enough for users to use emacs with
extensions comfortably, but some kinds of demands for who want working
something else with emacs as well must doing as them self, this the
reason for me to build things just I using or just contained within
@samp{entropy-emacs}.

Pacakges I built was aimed for:
@itemize
@item
Enhancing the basic emacs function or other elpa packages.
@item
Things needed for me as the special hobby.
@item
Useful self built extension which hope to sharing with others.
@end itemize


Now, I built serveral packages shown as below table:

@multitable {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem package name
@tab pakage description
@item entropy-cn-dict
@tab point char or region translation for chinese words (also useful for traditional chinese)
@item entropy-sdcv
@tab the emacs multi-dictionaries framework
@item entropy-common-library
@tab librarys for building other @samp{entropy-emacs} package
@item entropy-dired-cp-or-mv
@tab dired copy or move files extension for enhancing based dired refer function
@item entropy-global-read-only-mode
@tab emacs globally readonly mode for forcing lock buffer while opening
@item entropy-open-with
@tab open files using external applications
@item entropy-org-batch-refile
@tab batch refiling entries from org buffer
@item entropy-org-export-theme-toggle
@tab toggle org html export theme specific for choosing theme or buiding it temporally quickly
@item entropy-org-widget
@tab useful org widgets for other org refer extension building
@item entropy-portableapps
@tab emacs @uref{https://portableapps.com/, portableapps query} and open front-end for windows plattform
@item entropy-adblockP-rule-analysis
@tab emacs adblock rule simple parser
@item entropy-proxy-url
@tab http retrieving proxy tool for eww and emacs-w3m
@item entropy-s2t
@tab convert simplified chinese to traditional chinese func used for @uref{https://github.com/tumashu/pyim, pyim} (emacs chinese input method)
@item entropy-shellpop
@tab the yet-another @uref{http://github.com/kyagi/shell-pop-el, shell-pop} toolkit replacement for using @uref{https://github.com/wasamasa/shackle, shackle} as the popup method
@end multitable

@node Eemacs top-key map
@chapter Eemacs top-key map

For unified emacs experience both of CLI and GUI, @samp{entropy-emacs}
using the auto-adaptable key @samp{entropy/emacs-top-key} as the the
unified prefix key to bind a keymap @samp{entropy/emacs-top-keymap},
various commands hosted on it to be interactived thus.

Commonly @samp{entropy/emacs-top-key} was bind to @samp{C-@@} in CLI and @samp{C-`} in
GUI, all of them are reflected with physical key hints @samp{C-`} on your
keyboard. We make the convention that string @samp{[eprefix]} indicate the
hint @samp{entropy/emacs-top-key} , that example @samp{[eprefix] w} means hint
@samp{entropy/emacs-top-key} and @samp{w} sequentially.

@node Eemacs hdyra hollow
@chapter Eemacs hdyra hollow

@samp{entropy-emacs} using @strong{hydra-hollow} platform to manage hundreds of
key-bindings so that the user can found them easily and can always get
a properly way to remember the road-map for specific key-binding, let
it be obviously and clearly.

The @strong{hydra-hollow} platform built on the elpa @uref{https://github.com/abo-abo/hydra, hydra} package and melpa
@uref{https://github.com/jerrypnz/major-mode-hydra.el, pretty-hydra} which also based on @samp{hdyra}.

@samp{hdyra} was a package whcih provide apis to solve the pain of emacs
keybinding searching, it gives a interaction popup buffer which showed
a collection of key-bindings, and the popup buffer way is a function,
which can inject into the global-map, that's all, specially that those
collection of key-bindings does not pollute any available keymap, they
are hosted on a transient map i.e. a hydra keymap, and those
key-bindings called hydra-heads, and that's why it is named as
@strong{hydra}.

@samp{pretty-hydra} was a secondary encapsulation for @samp{hydra}, it make the
hydra-heads into groups, with more benefits for building bunch of
hydra-heads.

You do not need to know the underline of those package details, pick
up above briefly introduction only is enough.

@strong{What's hydra-hollow:}

Since there's sets of major-modes that user encounterred everyday
within developments in emacs, and each major-mode has its own key map,
sets of keybindings hosted on its key map, you saw that? we must
remember each keybinding we needed in each major-mode! It's pain!
Even for that we haven't counted any minor mode's key-map's
keybindings.

We hope to find a way to find a command's key binding in one or two
steps even for more steps that try to be limitted under four strokes
in possibilities, also with categorized prompts with those commands we
needed in any occurrence. And that's what @strong{hdyra-hollow} do, 'hollow'
means its a unified platform, a framework or a system.

@strong{Hydra-Hollow UI:}

@example
+---------------------------------------------------------------------------------------------------------------------+
| [page indicator] eemacs top dispacher [up]: previous page [down]: next page                                         |
|                                                                                                                     |
|                                                                                                                     |
|  Basic                                       WI&BUF                                                                 |
|=====================================================================================================================|
|                                                                                                                     |
| b w : Words manipulation                    C-c m : [e]Toggle mode line type                                        |
| b m : Core Operations                       M-w : Rich command for (window buffer) Dwim                             |
| b a : Avy Pos Jump                          C-x M-o : [g]Switch to Another Window                                   |
| b q : Vimish Mode                           C-c w : [e]Eyerbowse Map                                                |
| b y : Yasnippet Actions                     i w_: Winner Mode                                                       |
| b x : Xref referrence jumping               C-<f10> : [g]Resize Window                                              |
| b l : Lsp command map                       p : Popup window or buffer                                              |
| b c : Auto completion operations            C-x C-b : [g]Begin using Ibuffer to edit a list of buffers              |
| b t : Slide Filesystem Tree                 M-1 : [e]Buffer open with portable apps                                 |
| b v : Show entropy-emacs version            i l : Center buffer line                                                |
| b o : Dict search with sets of backends     C-x M-1 : [g]Split the single window to two windows with different size |
|                                                                                                                     |
+---------------------------------------------------------------------------------------------------------------------+

@end example

Above illustrator gives a simple @strong{hydr-hollow} instance UI
overlay. The title of current page is inserted at the top of the popup
buffer, title consists of the page order indicator, the main title
information, and the page navigation prompts. The rest part is the
cabinet contents of current page, for the example in here, there's two
drawers i.e. the @emph{basic} and @emph{win&buff}.

We called such the page is a hydra-hollow category, and the rest
part contained thus drawers is the hydra-hollow category's cabinet. A
hydr-hollow category also is a node of a chained hydra-hollow
categories, those categories who concatenating siblings to be a chain
that how the navigation pages implemented. In that categories chain,
you can using <UP> or <DOWN> key to navigate to previous or next
category respectively.

Each key-binding in a hydra-hollow canbinet also can be hydra-hollow
category, this makes the category be cross-referrence, which build a
hierarchical key-map navigation system, and we called the origin
category the @strong{baron} category. When you stroke a key through a baron
category to a sub-category, you can stroke <UP> key to return back.

In some hydr-hollow category chain may has large counts of categories
that may have pain to navigate one by one from the top category to the
target. In that case, you can stroke the @samp{universal-argument}
i.e. @samp{C-u} before invoking the specific category chain, and then a
category name querying interface will be poped out by emacs auto
completion system with all categories' description as candidates for
you to choose, and after the choice you will directly go to the target
category.

@strong{Hydra-Hollow category categories in entropy-emacs:}

In the global area, there's a top-level hydra-hollow dispatcher called
@samp{eemacs-top-dispacher} which contained global key-bindings and those
included in @samp{entropy/emacs-top-keymap} or some global commands without
global-map injected. You can invoke it by tap @samp{[eprefix] h}.

For major-modes spec, @samp{entropy-emacs} build individual hydra-hollow
category chain for them but with a unified key-binding to invoking
them, the @samp{[eprefix] m} which is bound for each major-mode.

@strong{Hydra map injecting:}

Although it's beneficial to group all keybindings into a hydra-hollow
instance, but we do not want to give out of the emacs native key
bindings sets (i.e. stand alone with that), @samp{entropy-emacs} use a
hydra map injecting tunnel to solve that problem. As the expample in
the hydra-hollow UI introduction, there's some keybinding's brief
description prefixed by a flag 'e' or 'g', they are the indicator to
prompt user that this keybinding is inject into
@samp{entropy/emacs-top-keymap} or 'global-map' as well, so you can
directly stroke the same key to call that command without calling on
such hydra-hollow category. Thus of, we try to keep bunch of emacs
native keybindings sets no changed via this mechanism.

There's also a 'm' flag for a major-mode hydra-hollow category's
heads, that say this keybinding is injected into current
'major-mode-map' in which case as the 'liked' meaning as 'e' or 'g'
but for a major-mode.

@node Custom @samp{entropy-emacs}
@chapter Custom @samp{entropy-emacs}

@samp{entropy-emacs} has lots of custom-variables be defined acquiescently
to influence each feature in main config files @samp{entropy-emacs-xxx.el}
or in self built extensions. Those custom-variables provides the wild
freedom customized ability for use-end to choose how to use eemacs.

Since emacs using @samp{custom.el} which is used by its canonical
customization toolkit to remember all customized settings,
@samp{entropy-emacs} is obeyed that convention for providing a top
customization group @samp{entropy-emacs-customize-top-group} which
contained all of those custom-variables mentioned formerly.

When the first time you using @samp{entropy-emacs}, you may want to create
the @samp{custom.el} file in root of @samp{entropy-emacs} used by emacs initial
with, as the well, @samp{entropy-emacs} gives the template custom file
located in same place which named @samp{custom-example.el}, you can copy it
and rename to @samp{custom.el} as reference for modifications or using it
as defaults.

@node Hacking for @samp{entropy-emacs}
@chapter Hacking for @samp{entropy-emacs}

@samp{entropy-emacs} allow user to modified its internals but this is not
suggested unless you are a developer or debugger of eemacs. Sets of
internals of @samp{entropy-emacs} was corresponding to each other tightly
which shown as that if you modified one code snippet while you are not
familiar with details logic designation of @samp{entropy-emacs}, you will
get mess with the functional in some place.

But, if you want to hacking for some code snippets, you can adding
advices for them using functional provided by emacs's @samp{nadvice.el}
@strong{before} init eemacs, in which case add such advices into @samp{custom.el}.

@samp{custom.el} is also used to stored arbitrary elisp codes, which means
that you could write features or loading extra self-defined
configuration files in that file which see as:
@lisp
;; this is the start of custom.el
(setq foo bar)

;; other eemas customizations
...

;; advices
(advice-add 'entropy/emas-xxx :after #'(lambda (&rest args) ...))
...

;; my functions

(defun myfunction-0 nil xxx)
...

;; in the end, load "my_entropy-emacs_extern.el" in "custom.el".
(let ((file (file-exists-p "/xxx/xxxx/.../my_entropy-emacs_extern.el")))
  (when (file-exists-p file)
    (load-file file)))
@end lisp

Thus, the file @samp{my_entropy-emacs_extern.el} will be loaded when
evaluating emacs custom file and after any eemacs specifications set
done, before @samp{entropy-emacs} be initing.

@node Config feature specifiction introduction
@chapter Config feature specifiction introduction

This chapter introducts the main config features of @samp{entropy-emacs},
each part of below sections pointing one feature category which was
the collection sets description and feature specified core sets, you
may want to select refer things you'd been mentioned or caring about
for, from jumping with the sequence as the section it self. But I
recommended for reading sections one by one from first to the end,
instead of jumping randomly while you are fisrt using @samp{entropy-emacs}.

Each feature required the basic emacs using experience has been got,
which means if you are the newbie of emacs, you must reading the emacs
internal tutorial first and then doing thus.

For WINDOWS specification section, only suggested to read for someone
using emacs on windows, that section was the sets of experiences by me
for using emacs on windows, I often using emacs on WINDOWS with one
portable programming encapsulation environment and that is designed
for this.

For chinese emacs user, when you want to input chinese and showing CJK
fonts well (without lagging or other crash problem when using emacs
with cjk occasions), you can obtain the minor skills from 'Font
specific' section.

Latest, all of below section can be the taste of @samp{entropy-emacs} for
understanding the difference between this to the default emacs using
experience, happy hacking with @samp{entropy-emacs}.

@menu
* Internal basic setting specific::
* Major modes for programming::
* Packages enhancements and introduction::
* Emacs on windows::
@end menu

@node Internal basic setting specific
@section Internal basic setting specific

@samp{entropy-emacs} using elpa/melpa emacs extension to build basic
work-around, for enhancing the basic emacs using experience.

Basic config of @samp{entropy-emacs} can be splitting into seven nodes:
@itemize
@item
workspace (window configuration) toggle/create
@item
modeline specific
@item
global buffer lock
@item
input method of chinese refer
@item
org mode
@item
font specific
@item
miscellaneous config
@end itemize

These seven parts consist the basic core of @samp{entropy-emacs}
config. They are oriented respectively for their individual direction,
and was necessary be the part of core of this.

@menu
* Windows configuration and workspace defination::
* Modeline themes toggle::
* Chinse input method::
* Globally readonly mode::
* Org-mode::
* Miscellaneous emacs internal setting::
* Font specific::
@end menu

@node Windows configuration and workspace defination
@subsection Windows configuration and workspace defination

Emacs using @strong{buffer}, @strong{window}, @strong{frame} to recoganize the current
editting space and recorde it's state, they are the basic conceptions
for elisp programmer for built editting aspect extensions for as more
convenience to create, move, toggle the editting space, we call such a
'editting space' is a @strong{workspace}.

Workspace managements consists of two parts:
@enumerate
@item
workspace/layout/window configurations toggle
@item
window toggle
@end enumerate

A workspace was one layout consists with several displayed windows
where that layout is in term of @strong{window-configuration} in emacs.
Layout toggle is used as switching different workspace, creating
layouts with different working purposes. This is useful for who
marking different tasks at the same time.

Thus, as the layout toggle, the basic thing when you facing to emacs
using was to jump the cusor point with sets of windows, for editting
buffers stored in those windows, cusor switching upon different
windows was called window toggle.

@menu
* Eyebrowse::
* Buffer or Window switching::
@end menu

@node Eyebrowse
@subsubsection Eyebrowse

@samp{entropy-emacs} workspace creating, toggling, and defination using
@samp{eyebrowse}, a melpa extension settled out with robust functional. You
can find it on @uref{https://github.com/wasamasa/eyebrowse, github}.

In @samp{entropy-emacs}, @samp{eyebrowse} was acted as the workspace management
host which provide layout toggle, creating, renaming or deletion
functions. Each workspace's name, window configuration, slot number
was stored as the sets of @samp{frame-parameter}, so it works well with
other emacs intern toolchain.

@itemize
@item
@strong{eyebrowse's workspace dash list:}

@enumerate
@item
@samp{tag}: a name string indicated layout usage purpose.
@item
@samp{slot}: the numberic identification of corresponding layout.
@end enumerate

As the meanings shown above, eyebrowse exhibits each workspace
through the way for display the layout's tag-name and it's numberic
slot.

In @samp{entropy-emacs} , the tag-name and slot number was displayed on
the left of modeline which like as:
@example
+--------------------------------------------------------------------------------+
|  * 169 U(Unix) *scratch*      Lisp Interactioin Orgstruct>>      << 4: 23 ALL  |
+--------------------------------------------------------------------------------+
(1/3) Enter slot:

     +------------------+
---> |1: basic workspace|
     +------------------+
      2: Readme edit
      3: News reader
@end example

Commonly, the display format of thus is formed as
@code{slot-number:tag-name}, and the face was usually came as yellow
forground covered on black background.

Layout switching was through the way of using emacs completion
framework that shown in minibuffer with candidates named as
corresponding layout's tag name and its unique slot id.

But the quickest way for choosing a often used layout was using the
shortcuts prefix @samp{[eprefix] C-c w} with the workspace slots number
limited within decimal based digit as '1~9', for example you can
active key binding @samp{[eprefix] C-c w 2} to toggle workspace to slot
'2'. By default, @samp{eyerbrowse} supports toggle to none exists slot by
creating it first before switching but without tag setting prompts,
or you can create new slot by sticking @samp{[eprefix] C-c w C-c} which
will create one new slot with tag set prompting which is a feature
adding by @samp{entropy-emacs} by hacking it.

@item
@strong{Derived workspace:}

By default each workspace provided by eyerbowse layout management
system was independently by each other on the conceptual aspect,
which means that eyerbowse recognizes layouts by one-dimension that
[1,2,3,4,@dots{}] one by one without any sub-workspace concepts.

Thought about a scene that if the single workspace has too many
windows opened, this will cause the disaster for your eye-visual
experience that moving around from each window uppon on your poor
eyesight. (also thought about this happened when your screen
produced with low dimessions as traditional '1366x768qqq'.)

@example


+---------------+-------+--------------------------+
|               |       |                          |
|   buffer 0    |buffer |     buffer 5             |
|               |       |                          |
+---------------+  4    +------------+-------------+
|               |       |            |             |
|   buffer 1    |       |            |  buffer 7   |
+------+--------+       |buffer 6    |             |
|      |        |       |            |             |
|      |        +-------+------------+-------------+
|      |        |                                  |
|buffer| buffer |  xxxxx xxx xxx xxx               |
|      |        |                                  |
|  3   |   2    |     xxx xxx xxx xxx              |
|      |        |                                  |
|      |        |                                  |
|      |        |                                  |
|      |        |                                  |
|      |        |                           buffer8|
+------+--------+----------------------------------+


@end example

Do you worried about this single screen layout measured your mind?

Or you can create one new workspace to exchange partitial of current
state to that new slot, but how you organize the association between
these two slots? By memory of your mind?  God bless, it's just
compat for that state where you just have two slots doing as this,
if further @dots{} how imagined that what will happening?

For resolving this problem, @samp{entropy-emacs} expands eyebrowse
one-dimension workspace management logic to @strong{main-derived}
conceptual. For the literally meaning , workspace has two kinds:
@itemize
@item
@strong{main slot}
@item
@strong{derived slot}
@end itemize

Main slot can be understanding as the origin one while slot has been
created, in that case you haven't given the try or have demands for
several buffer splitted in one screen which will cause occurance as
above description. Derived slot will be created when you doing for
arbitrary reason for that.

@example

+------------+ +------------+ +------------+
| main slot 1| | main slot 2| |main slot 3 |
+-----+------+ +-----+------+ +------+-----+
      |              |               |
       \             |               |
+------v-----+ +-----v------+ +------v-----+
|            | |            | |            |
| derived 1  | | derived  1 | | derived  1 |
|            | |            | |            |
|         2  | |          2 | |          2 |
|            | |            | |            |
|         3  | |          3 | |          3 |
|     .      | |            | |            |
|     .      | +------------+ |          4 |
|     .      |                |            |
|     .      |                |          5 |
|            |                |            |
| derived 9  |                +------------+
|            |
+------------+

@end example

@item
@strong{Derived slot create:}

To create one derived slot can be implemented as call func
@samp{entropy/emacs-basic-eyebrowse-create-derived} or with its
keybinding @samp{C-c v}, after then, you will be required to create the
derived workspace tag name and the last you will get the workspace
as displayed with slot and tag name format as

@example
main-slot.derived_number: derived name
@end example


For toggle the derived slot, using function
@samp{entropy/emacs-basic-eyebrowse-switch-derived}'s keybinding @samp{C-c
  M-v}.

For backing to main slot, was hanged with keybinding @samp{[eprefix] w
  C-o} which call function @samp{entropy/emacs-basic-eyebrowse-switch-top},
it's useful for quicly back from the temp derived slot to top
(called 'top' by main) slot without remember the current main slot
number or backing with calling
@samp{entropy/emacs-basic-eyebrowse-switch-basic-window}.

@item
@strong{Derived slot limitation:}

Now, for the designation purpose, @samp{entropy-emacs} just giving each
main slot nine derived slots for deriving by since for using case, 9
derived workspaces was enough for what I may thought, it's no reason
to build various of derived one which will cause the difficulties
managements, for what be as known:
@quotation
less is more
         ---- xxxx

@end quotation
@end itemize

@node Buffer or Window switching
@subsubsection Buffer or Window switching

The common operations of living under the workspace was buffer and
window switching , thought about the scene that if you want to jumping
with many and many buffers or windows within one workspace, it must
has a beneficently way for handling thus.

@samp{entropy-emacs} provide three ways for filling this conceptual:
@enumerate
@item
buffer jumping
@item
window exchange
@item
window size adjusting

@item
@strong{Demo workspace layout:}@*
@example

+-------------+-----------------------------+
|             |                             |
|  buffer 1   |                             |
|             |                             |
+-------------+      buffer 3               |
|             |                             |
|             |                             |
|  buffer 2   |                             |
|             +-----------------------------+
|             |                             |
|             |                             |
|             |     buffer 4    <--- current|
|             |                             |
+-------------+-----------------------------+
@end example

Assumption on above demo, your cursor are on buffer-4 currently and
the place you want to jumping to was buffer-1. If you use emacs
internal primitive func @samp{other-window} , it's hard to do as buffers
counts larger than 2.

@samp{entropy-emacs} using melpa package @samp{ace-window} for enhancing it to
have morden query prompts for all buffers/windows in current
workspace, it using function @code{(ace-window)} which is globally bind
to @samp{C-x M-o}. When you invoke that keybinding, a temporarily keymap
is used to switch buffers/windows on with numberic overlays
displayed in each window of current workspace and the chosen for
jumping is hinting corresponding numberic key as illustrating the
visual feedback of below demo:

@example
+------------------------------+-------------------+---------------------+
|1                             | 4                 |  8                  |
|                              |                   |                     |
|                              |                   |                     |
|                              +-------------------+                     |
|                              | 5                 |                     |
+----------------+-------------+                   |                     |
| 2              | 3           |                   |                     |
|                |             |                   |                     |
|                |             |                   |                     |
|                |             |                   +---------------------+
|                |             +--------+----------+ 9                   |
|                |             | 6      | 7        |                     |
|                |             |        |          |                     |
|                |             |        |          |                     |
|                |             |        |          |                     |
+----------------+-------------+--------+----------+---------------------+
| u:@@** <> lisp-interaction-mode *scratch*          Top of 1.1k (20,100) |
+------------------------------------------------------------------------+
@end example

Another bennifit window jumping method was using us self-built func:

@example
entropy/emacs-basic-windmove-(up/down/right/left)-cycle
@end example


The raw func obtained from
@uref{https://github.com/troydm/emacs-stuff/blob/master/windcycle.el}.

They are binding to @samp{C-x up/down/right/left}. That means you could
jumping cycle round for sibling window quickly with your instincts
visual sensitive.

@item
@strong{Window resize:}

By the default, any dividing behaviour in emacs was half width
sibling state, but the occurence when you want to get the specififc
window dividing width, may rely on the external extension power.

@samp{entropy-emacs} use package @samp{winresize} to provide such feature. And
it's main func binded with @samp{C-<f10>} shortcut, in that way, when you
active it til you enter the @samp{RET} key, the full duration process was
using Arrow-key to resize window size animatedly as the visualized
size alteration.

Arrow-key up, down, left and right controlling windows size rising
or shutter forms. For just two window of one frame horizontally,
right and left arrow-key was only functional, the otherwise for just
two as it but with vertically state was limited to just up and down
keys functional, excepting this, opposite conceptual.

Once you enter @samp{RET} after resizing, the new window size state
stored as the result, this size will remained by @samp{eyebrowse} and
other workspace refer toggle or restore units.

@item
@strong{Window exchanging:}

With eachs window stick square on the fixed position when setted
down by dividing for, the occurence for exchanging window buffer was
frequently, emacs internal func @code{buf-move-up/down/right/left} gives
the try as thus. We binding them to @samp{C-c C-up/down/right/left}
respectively.
@end enumerate

@node Modeline themes toggle
@subsection Modeline themes toggle

@samp{entropy-emacs} provide four kinds modeline style:

@multitable {aaaaaaaaaaaaaaa} {aaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem name
@tab tag
@tab description
@item origin-specific
@tab origin
@tab minor extended origin `mode-line-format`
@item doom-modeline
@tab doom
@tab morden simply mode-line style extracted from @uref{https://github.com/hlissner/doom-emacs, doom-emacs}
@item sapceline
@tab spaceline
@tab morden extensible mode-line style of @uref{https://www.spacemacs.org/, spacemacs}
@item powerline
@tab powerline
@tab the enhanced exensible mordern mode-line based used for @samp{spaceline}
@end multitable


Each of them are combined with specifics for be fit for
@samp{entropy-emacs}. You can set the custom-variable
@samp{entropy/emacs-modeline-style} with the tag symbole shown from above
table:
@lisp
;; demo modeline setting code snippets of entropy-emacs
(setq entropy/emacs-modeline-style 'powerline)
(setq entropy/emacs-modeline-style 'spaceline)
;; .... and so on
@end lisp

The default modeline style is'origin', whose default setting was aimed
with keeping balance with emacs performance and visualization
experience. It's built by eemacs internally and is presented for
trying to did as more as close to emacs's native @samp{mode-line-format}.

@uref{https://github.com/TheBB/spaceline, Spaceline} was the wild used modeline of other users's custom emacs
config, but in @samp{entropy-emacs}, it is not recommended for using this
as the default modeline style, because it lagging with huge process
garbage collection idle slate during commonly emacs using
occurence. This was caused by sets of segments of spaceline for what
was lead to this issue. Another icons version spaceline was not
recommendation for as, the font default required for and the based
spaceline core performance problem was both annoying for user who want
to use them out of box. (@samp{spaceline-icons} will not renderd nice on
windows platform as well as linix platform even if the extra fonts it
required were installed corrently).

Thus, if you want to use spaceline, I recommend to use @uref{https://github.com/milkypostman/powerline, powerline}
instead because it's the core of spaceline and powerline's origin
segment corresponding was pure and simple which may be without lag
performance as what gets into spaceline.

@uref{https://github.com/seagle0128/doom-modeline, Doom-modeline} was the newest wild used @samp{mode-line-format} other than
spaceline and with nice performance optimization and more segements
out of box, but its internal using lots of advices for emacs @samp{subr} or
primitives to get its own aim for implementing some specified features
it must be used as. Thus, using doom-modeline may cause emacs native
unreliable since those /redefine/s, but commonly there's no need to
worry about for.

The Toggle func for switching different modeline at real time was
supported with bounds of func:
@itemize
@item
@samp{entropy/emacs-modeline-mdl-origin} :@*
Toggle to origin-specific modeline style.
@item
@samp{entropy/emacs-modeline-mdl-doom} :@*
Toggle to doom modeline style.
@item
@samp{entropy/emacs-modeline-mdl-powerline} :@*
Toggle to powerline modeline style.
@item
@samp{entropy/emacs-modeline-mdl-spaceline} :@*
Toggle to spaceline modeline style.
@end itemize

@node Chinse input method
@subsection Chinse input method

For emacs typing with chinese experience, the default chosen for you
was to used operation system's default input tool-chain which was sat
as out of box. And then the second for that was to using the emacs
interanl chinese input methods as the list below:

@itemize
@item
@samp{chinese-4corner}
@item
@samp{chinese-array30}
@item
@samp{chinese-b5-quick}
@item
@samp{chinese-b5-tsangchi}
@item
@samp{chinese-ccdospy}
@item
@samp{chinese-cns-quick}
@item
@samp{chinese-cns-tsangchi}
@item
@samp{chinese-ctlau}
@item
@samp{chinese-ctlaub}
@item
@samp{chinese-ecdict}
@item
@samp{chinese-etzy}
@item
@samp{chinese-punct}
@item
@samp{chinese-punct-b5}
@item
@samp{chinese-py}
@item
@samp{chinese-py-b5}
@item
@samp{chinese-py-punct}
@item
@samp{chinese-py-punct-b5}
@item
@samp{chinese-qj}
@item
@samp{chinese-qj-b5}
@item
@samp{chinese-sisheng}
@item
@samp{chinese-sw}
@item
@samp{chinese-tonepy}
@item
@samp{chinese-tonepy-punct}
@item
@samp{chinese-ziranma}
@item
@samp{chinese-zozy}
@end itemize

You don't have to know the each knowledge about them, but the most
popular used one was @samp{chinese-py} which was aslo the most popular
method for chinese people using as well kown as CHINESE PINYIN (汉语拼
音).

Although @samp{chinese-py} input method was pure and powerful for basic
using, if once you get it on your scatter task, you will find it was
really simple and crude which can not be used as the daily used one,
as generally say that its painfullly for choosing typing candidates
since it doesn't has its own comprehensively dict database. As the
result, @samp{entropy-emacs} usig the most powerful and comprehensive
'pinyin' support melpa extentioin @uref{https://github.com/tumashu/pyim, pyim} and @uref{https://github.com/DogLooksGood/emacs-rime, emacs-rime}:

@menu
* PYIM::
* EMACS-RIME::
@end menu

@node PYIM
@subsubsection PYIM

The breif descriptioin from its README is:

@quotation
PYIM 是一个 Emacs 中文输入法，支持全拼，双拼，五笔，仓颉 和 Rime 等

@end quotation

@example
这是一段中文说明，你好shijie
                      ^
                      |
                      +-------------------------+
                      | 1. 世界 2. 时节 .....   |
                      +-------------------------+
@end example

Above demo shows the fully process for input chinese using
pyim. pinyin candidates shown within the tooltip widget @uref{https://github.com/tumashu/posframe, posframe}
created by the author same as pyim be, there's other candidates
exhibition widgets for chosen:
@enumerate
@item
minibuffer

Using minibuffer be the widget as:
@example
+----------------------------+
|                            |
| xxx|                       |
|                            |
|                            |
|                            |
|----------------------------|
| 1.word1 2.word2 .......   <------minibuffer pyim pinyin candidate list
+----------------------------+
@end example

@item
popup:

Similarity with posframe but using old emacs's overlay mechianism
which may have lag of performance that based with it's design
logical, as the opposite, @samp{posframe} using the new @samp{child-frame}
emacs feature which just contained in emacs version on 26.1 and
uppers. It is also the only supported popup widget for a terminal
display emacs session since emacs can not handle @emph{child-frame} for
that display type.

@item
@strong{Pyim dicts:} @anchor{sectionpyim-dict}

Although @samp{pyim} was one emacs extension written by @uref{(info%20"elisp"), elisp}, it was
also one comprehensive chinese input programe which has the same
sets of products rely on operation system e.g. @samp{fcitx-pinyin},
@samp{rime} or @samp{ibus-pinyin}, it relies on emacs internal input method
framework. Thus pyim need extra words dict for driven for candidates
completion.

@samp{pyim} extra dict was plain text format as:
@example
ni-hao 你好
shi-jie 世界
@end example

Sequence continuing as thus.

@samp{entropy-emacs} provide the default extra dicts archived in @uref{https://sourceforge.net/projects/entropy-emax64/files/entropy-emacs_hitch/20190505/, here},
there's two dicts:
@enumerate
@item
core.pyim
@item
extra.pyim
@end enumerate

There two dicts was enough for me to daily using , names of them are
meaned as the loading sequence or dict collection categories belong
to them individually. @samp{Core.pyim} was extract from rime's internal
dict, containes 816321 entries, reached the normal proper dicts size
as suggested from pyim author, @samp{extra.pyim} contained extra popular
vocabularies and animal, stars, psycology or other sets of scienece
subjects vocabulary collection, it's size about 0.8 million entries.

The @samp{extra.pyim} extracted or converted from some @strong{proprietary
softwares}, so that they are not free to use that just using as
@strong{learning way} as the examples for building your own dicts or used
just as personal way without business purposes.

@item
@strong{using liberime as rime backend for pyim}

Except for plain text dictionary as caching method, the another
project @uref{https://github.com/merrickluo/liberime, liberime-config} gives the ability to get IME query
candicates from native @uref{https://rime.im, rime} engine @uref{https://github.com/rime/librime, librime}, and the configuration
steps are easily and thus as:

@enumerate
@item
given the rime schemes host in operation system for variable
@samp{entropy/emacs-internal-ime-rime-system-share-data-host-path}.
@item
Setting the specific rime scheme selected
@item
Optionally give the rime cache dir value to
@samp{entropy/emacs-internal-ime-rime-user-data-host-path}.
@end enumerate

@item
@strong{enable pyim with @samp{entropy-emacs}:}

The turn-off custom variable controlling whether enable pyim when
emacs startup finished i.e. set
@samp{entropy/emacs-internal-ime-use-backend} as @samp{pyim}, you can active
it in your @samp{custom.el} file, then the next time you start up or open
new session of emacs , pyim will automatically startup using the
default dicts specific by @samp{entropy-emacs} as introduced from @ref{sectionpyim-dict, , pyim
dicts section}, or if you want to enable dicts specified by yourself,
you can setting up custom-variable @samp{entropy/emacs-pyim-dicts}, the
variable information and value format can be shown by hinting @samp{C-h v
  entropy/emacs-pyim-dicts RET}.
@end enumerate

@node EMACS-RIME
@subsubsection EMACS-RIME

Emacs-rime was an frontend of @uref{https://github.com/rime, rime} opensource input method for emacs
binding by @samp{emacs-lisp} with its own emacs's dynamic module. It's
provide simple api to communicate with the @uref{https://github.com/rime/librime, librime} and get the CBK
from thus to the frontend implemented by @samp{emacs-lisp} to let user
handle all typing through @samp{rime}.

@samp{entropy-emacs} has fully configured @samp{emacs-rime} to let user use it
out-of-box.

@itemize
@item
@strong{enable emacs-rime with @samp{entropy-emacs}:}

The turn-off custom variable controlling whether enable emacs-rime
when emacs startup finished i.e. set
@samp{entropy/emacs-internal-ime-use-backend} as @samp{rime}, you can active
it in your @samp{custom.el} file, then the next time you start up or open
new session of emacs , emacs-rime will automatically startup using
the eemacs unified rime schema and cache configuration as described
in section [BROKEN LINK: using liberime as rime backend for pyim].
@end itemize

@node Globally readonly mode
@subsection Globally readonly mode

Emacs open all common buffers with editted state by default. It's
convenience with the state for usually sights which allow user to
quickly read or write sth into file.

But with the buffer counts increasing for one emacs session, this
feature was annoying with the worriers for that we can not keep
careful for all buffers modification state when you take the mistake
modification little bit inadvertently.

The way for solving this problem is to create one feature for emacs to
lock all buffer as read-only (i.e. locked) state by the default for
buffer opening, because most of occurrence we open one file is to read
but not to write.

@samp{entropy-emacs}'s self built extension @samp{global-readonly-mode} give the
anwser.

@samp{global-readonly-mode} provide three modes:

@multitable {aaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaa}
@headitem type modes name
@tab value
@item find-file initial
@tab all
@item major modes rule
@tab modes
@item dired find-file initial
@tab convert
@end multitable

You will enable it do with filling follow elisp codes snippet into
custom file:
@lisp
(setq entropy/grom-enable t)
(setq entropy/grom-readonly-type "all")
@end lisp

The suggested mode choice was @samp{all}, which injecting read-only feature
into @code{(find-file)} function, after sets this value, any buffer opened
with lock state excluding the buffer name exception list
@samp{entropy/grom-customizable-special-buffer-name-regexp-list}, the value
of this list was regexp string matched the file name before
@code{find-file} opens that file.

Internally, eemacs has some pre-defined buffer name regexp filter to
guarantee there's no conflicts with vanilla emacs and eemacs
environment. For those buffers who are temporally and miscellaneous
ones are also filtered out as default.

Due to the mechanism of emacs defualt setting used by other extension
built internally or from melpa/elpa, global-readonly-mode will cause
some coordination problem with other package's functional, since by
the default that some func doesn't judge the buffer read only state
before executing processing, in other words, they does with the buffer
state by editted default and only did as in that case. Org-mode was
the typically one who required the refer buffers it will be did with
must be editted state, in which case, @samp{entropy-emacs} adding sets of
advicing funcs for the Org-mode widgets and modified through
redefining some apis for patching with adding buffer read only state
detecting snippet.

The "modes" type of global-readonly-mode was another way for handling
the read-only filter with this package when you are just want to make
the buffer opened with limitation while using specified major mode(s),
custom variable @samp{entropy/grom-mode-list} are the motorized
specification tunnel for thus, you can check it with @samp{C-h v
entropy/grom-mode-list} for see the default major modes be locked
with.

Remeber, you can cancel or disable global-readonly-mode whenever you
want to do so with interactive func @samp{entropy-grom-mode} , it will
remove all the hook and cancel all the advisors this package maked in.

@node Org-mode
@subsection Org-mode

Org mode was the structure plain text document editting system
combined with emacs closely, which obtained the admiration with
various emacs users. This section was implicitly for the user who
understand with the basic Org-mode knowledgebase and had used it for a
while, and the rest introduction was the specification of
@samp{entropy-emacs}'s internal Org-mode configuration specifications.

@itemize
@item
@strong{Item bullets style:}

Each headline in Org-mode buffer with the defautl visual style
inserts with dozen of @samp{*} chars. More visualized style can be hacks
by emacs melpa package @uref{https://github.com/sabof/org-bullets, org-bullets}, who provides such the feature.

@samp{entropy-emacs} using @samp{org-bullets} for fancying up org item bullets
style upon for creating two style:
@enumerate
@item
roman
@item
circle numberic
@end enumerate

Both of them displayed for showing the sequence number for the
heading level instead of the asterisk counts visualized one which is
org-mode's default sets.

@samp{roman} type displayed as the sequence list as:
@example
"●" "Ⅱ" "Ⅲ" "Ⅳ" "Ⅴ" "Ⅵ" "Ⅶ" "Ⅷ" "Ⅸ" "Ⅹ" "Ⅺ" "Ⅻ"
@end example

The instance for this is:
@example
● heading 1
  Ⅱ heading 2
    Ⅲ heading 3
      Ⅳ heading 4
        Ⅴ heading 5
          Ⅵ heading 6
          ......

@end example

Same sytle show for circle numberic:
@example
"⓪" "①" "②" "③" "④" "⑤" "⑥" "⑦"
"⑧" "⑨" "⑩" "⑪" "⑫" "⑬" "⑭" "⑮"
"⑯" "⑰" "⑱" "⑲" "⑳"
@end example

Bullets shown style was the minor fancy setup, choosing the taste as
your way. follow config codes snippet for doing thus:
@lisp
(setq entropy/emacs-org-bullets-type "roman") ; or with "circle numberic"
@end lisp

@item
@strong{Headline level face:}

Headline level influenced headline face of Org-mode visulized style
corresponding to each emacs theme specification. Some customized
theme package from melpa given the try to enlarge the heading font
size by default as showing with the sensible heading level case.

In @samp{entropy-emacs}, this feature was all being disabled for the
habits for me. Enlarge heading font will cause headline tag can not
be alignment with the default tag alignment setting by custom
variable @samp{org-tags-column}, this specification influenced by
@samp{entropy-emacs} specific function
@code{entropy/emacs-adjust-org-heading-scale} which be added into hook
@samp{org-mode-hook}, if you want to cancel this specification, you could
place follow codes snippet into your custom file"

@lisp
(setq entropy/emacs-disable-org-heading-scale nil)

;; Reload major-mode for current to trigger the hook if enabled that
;; in a running session yet
;;
;; (funcall major-mode)
@end lisp

@item
@strong{Org file open associate application:}

Org mode have the functional for open link in a buffer with
'org-mode' as major mode, each file were recognized for their file
type judged by it's file name suffix e.g. ("\\.pdf", "\\.docx",
"\\.cpp"). In org mode, file identifier can be more than the file
name suffixes rule recognizing, custom variabl @samp{org-file-apps}
controlling thus.

In @samp{entropy-emacs}, the value of @samp{org-file-apps} was minor setting
with few entries be pdf and gif files.

Gif files was the animation picture foramt for web or local state,
it can be containd dozen frames (animation stacks) which can be the
size cover 'kb' to 'Mb'. However, when the size larger than several
'Mb', emacs will lagging seriously for a long time to display the
animation before analyzing it's fram counts, because emacs display
gif files through the way splitting the picture into the frame list
and then render them one by one, this was low effectively compared
with other picture viewers. Therefore, @samp{entropy-emacs} set all the
gif file links of org file to be opened with external system picture
viewer.

Pdf files were rendered in emacs with frame stacks in turn as the
way for display gifs, thus viewing pdf within emacs was not a good
idea, thus using system application referred it as well.

@item
@strong{Org html exporting style:}

Org has the translator backend for html exporting with the internal
default css style decoration. The defautl html page decoration was
plain and pure sytle based on web standards rule. For given sets of
html exporting style choices, Org exposed the api @samp{org-html-style}
custom variable for users to specific the external css or override
the default sets.

@samp{entropy-emacs} comes with the self built packge
@samp{entropy-org-export-theme-toggle} for providing the theme
switches. Although this self package was not indicated just for org
html exporting style toggle functional but also for latex and other
org exporting backends using, as now @emph{[2018-11-24 Sat 19:58] } I
just implemented the way for html exports backend.

@samp{entropy-org-export-theme-toggle} gives the four internal html
exporting themes i.e. @samp{Worg}, @samp{read-the-org}, @samp{Bigblow}, and
@samp{red-snapper}. First three are collected form other's customize org
html exports style and the last was designed by me for be the
default org html exporting style as what this file's html variant
used.

@item
@strong{Org bables comfirmation:}

As well known that org mode was designed for literally programming
suits, code block embedded within the doc was merited in its
declaration. In org mode, that's code blocks called @strong{bable}, as the
broken for god's dividing language curse for preventing humans'
intention of building the bable through across the sky.

Each bable block identified with one programming language source
viewer, as thus, evaluation for codes was demands for insert the
code snippet result into context of current org buffer.

By defaults, org-mode will confirm the operation decision before
evaluating them, as well in exporting status. But in org version
upon 9.1.xx, org changes it's exporting bable evaluation confirm
mechanism, which just confirm the bable evaluating when it's code
block indicated that this block's evaluating will be confirmed.

As thus, @samp{entropy-emacs} gives the try for patching the export funcs
for obtaining the origin confirmation process during the babel
evaluating. Function @code{org-babel-confirm-evaluate} was the main
subroutine for patching with, @samp{entropy-emacs} forcing setting the
local variable @samp{org-confirm-babel-evaluate} to t in the process of
this function's running context, because that in state of export
this variable will cleaned to null before calling
@code{org-babel-confirm-evaluate} without finding the mechanism for.

It also coursed problem occured on evaluate inline abbreviated code
snippet like point on @samp{call_func()}. The issue was that the
confirmation prompt string doesn't include the babel name. For
resolving it, @samp{entropy-emacs} declared one internal variable
@samp{entropy/emacs-org--src-info} for storing the info generated by func
@code{org-babel-get-src-block-info} and @code{org-babel-exp-src-block}
temporally for using for function @code{org-babel-confirm-evaluate}, the
info got thus will contain babel block name rather than the origin
one generated within the process.

@item
@strong{Org auto insert custom id:}

Each headline has it's intential properties, one of them is
@samp{CUSTOM_ID} which is an headline identifier for be distinguished
with parents or other headlines.

Manually inserting or setting @samp{CUSTOM_ID} was the default method for
org users, but it's painful for doing thus with dozen of headlines,
@samp{entropy-emacs} gives the way for automatically insert @samp{CUSTOM_ID}
for all headlines within current org file buffer. These was sets of
functions:
@enumerate
@item
@code{entropy/emacs-org-add-ids-to-headlines-in-file}
@item
@code{entropy/emacs-org-auto-add-ids-to-headlines-in-file}
@end enumerate

The first one gives the forcing way for inserting @samp{CUSTOM_ID} to
each headline while one of them doesn't have one, and the second
otherwise for the state just when the option comment string in place
somewhere in current org file, i.e. "#+OPTIONS: auto-id:t".

Don't like the human readable id style, these two automatically func
gives the id format as the numeric series with the prefix "h:", this
mechanism reducing the possibility for conficting @samp{CUSTOM_ID}
occurence.

@samp{entropy-emacs} gives the way for automatically adding headlines ids
before save the org file who contained that "auto-id" option, it's
useful for the convenience way.

@item
@strong{Org tag inserting:}

Org's each headline can make with tag for sortting or filtering
with, each headline can has several tags sperated by colon, tag in
current buffer can be cached in @samp{org-file-tags} for quickly querying
and choosing for insertion, this feature can also be retreived as
global org files includes agenda files.

@samp{entropy-emacs} using melpa extension counsel for enhancing the
using experience of inserting tags, the func @code{counsel-org-tag}
provides the feature. By default, @samp{entropy-emacs} restricted tag
list collection scope via globle (with all detected org files), so
that you can quickly query tags from all existed ones to prevent
create the conflicts with messure spelling similarities of the same
tag.

Eemacs bind @code{counsel-org-tag} as same as the origin org tag
insertion keybinding as for @samp{C-c C-q}.

@item
@strong{Org image drop and down:}

Org file as the simple rich txt file can display images, attach
files and whatever file type, the default insertion way was using
the manually type coding with the format as @samp{[[link
  location][content description]]}, or you can drop down the file with
gui mouse as usually what other gui application does, this feature
provided by melpa package @uref{https://github.com/abo-abo/org-download, org-download} but just with image thing as.

@enumerate
@item
image drop and down by local (just support on emacs gui port)
@item
image download from url
@item
capture screenshot with external tools
@end enumerate

Image drop and down for org buffer was handled by DND handler
@samp{org-download-dnd}, you don't need to know the detailes sticking
within this handler, here just to show the general process passing
by. Onece you draging one image file from system filesystem manager
e.g. Explorer(windows), Nautilus(linux gnome) @dots{} , to emacs gui
frame and pointed into the actived org buffer, @code{org-download-dnd}
will insert the image link which redirected to that image location.

The simple way for insert image source from other location was
through the way by downloading url method, and this is the second
feature of @samp{org-download} to handle the image insertion action. The
interactivation was simply just by calling the command
@code{org-download-image} soon as.

Depending on downloading way, @samp{org-download} also gives the try for
providing the image capture insertion function, this called
@code{org-download-screenshot}, literally meaning point to 'download' as
the way of this operation was steps sequenced as:

@enumerate
@item
Calling external gui screenshot application tracked by emacs
subprocess and waiting for returning the image captured url.
@item
Using @code{org-download-image} to handle the reponse using the
functional it provision to download that captured screenshot
image file.
@end enumerate

@samp{entropy-emacs}'s hacking on @samp{org-download}:

@enumerate
@item
Patching org download inserting process support unicode file
name:

Origin @samp{org-download-method} was @samp{'directory} and using the
process snippet below to extracting the filename url to inserted
into org file:
@lisp
(org-download--fullname link ext)
@end lisp

While the argument link was combine with unicode file name, the
link generated by it will contained the url-hexified chars for
escape the conflicated part of web url rule. Commonly it's useful
and normally.

But for some url strings consisted of characters in humarn
language script, hexify escape method was unexpected for readable
meaning. Thus, I given the specified @samp{org-download-method} for
falling back with the as-it link string presentation while
inserting the target image url string into org buffer's current
point and it is constructed like:

@lisp
(defun custom-org-download-method (link)
  (org-download--fullname (org-link-unescape link)))
(setq org-download-method 'custom-org-download-method)
@end lisp

@item
Image link insertion automatically adjusting start position
feature:

This feature looking at and thought about where the current
cursor located is and automatically adjusting the insertion start
point follow below rules:

@itemize
@item
@emph{Point at beginning of empty line:}

Insert link in current point.

@item
@emph{Point at middle or end of empty line:}

Insert link in current point.

@item
@emph{Point at end of none-empty line:}

Insert the link under of current line with newline creating.

@item
@emph{Point at middle of none-empty line:}

Insert the link under of current line with newline creating.
@end itemize

@item
Auto indented link position:

When the customize variable @samp{org-adapt-indentation} was enabled
in current org buffer, automatically indenting the link position
after insert the link string by org-download.
@end enumerate
@end itemize

@node Miscellaneous emacs internal setting
@subsection Miscellaneous emacs internal setting

Emacs brought with various modes and sets of basic tool chains, all of
them are standing with various highly customizable features with
referred customization variables. Each customization variable gave
their default value which is considered can be defined as generally
meaning by their authors.

But, not each default customization variable's value gave was suitabl
for all user, and some was not proper or conflicted with
@samp{entropy-emacs}. Thussome minor enhancements and the advices adding
was also the necessaries for the taste of @samp{entropy-emacs}.

Thus, both the default setting modification and the other minor sets
did by @samp{entropy-emacs} are mischellaneous setting for as.

This section was the introduction for thus.

@itemize
@item
@strong{Backup and auto-save config:}

@samp{entropy-emacs} disabled the auto backup file which functional of
emacs to gen the copy of current buffer-file before modifying
applied to it. Most of people using git or other vcs (version
control system) to manage the file version, thus the backup for the
file was not necessary as the default setting.

Otherwise, the auto saving file content feature was needed for
preventing the accidental that emacs corrupted where each non-saved
modifications for buffers with files tiled will be lost. But it also
disabled by default in eemacs since its timer injection commonly
disturbing user inputs rhythm. You can invoke it manually by type
@samp{M-x auto-save-mode}.

@item
@strong{Smooth scrolling buffer:}

Emacs default make the current visual line be in middle of the
window when current scrolling point at the top or bottom of
window. That's not the habit we commonly seen in other editors.

@samp{entropy-emacs} defined a minor mode
@code{entropy/emacs-basic-smooth-scrolling-mode} for emulating the
behaviour as so. There's also a global mode
@code{entropy/emacs-basic-smooth-scrolling-global-mode} which used that
in each displayed window.

@item
@strong{Auto sudo editting:}

When using emacs on unix like OS, visiting or editting privilege
permission required files will using emacs @uref{https://www.gnu.org/software/tramp/, tramp} feature, the
manually way for it will cost time for inputting the special file
path string, @samp{entropy-emacs} using melpa package @uref{https://github.com/ncaq/auto-sudoedit, auto-sudoedit}
giving the auto way as so.

You don't need to active using any commands manually or giving sets
of setting, just using @code{find-file} or query and open privilege
permission required files using dired or other emacs internals,
@samp{auto-sudoedit} will auto detective the permission needed and prompt
for executing the account accessable operation.

By default this feature is not enabled since there's safety problem
around management of lots of root files, hint @samp{M-x
  auto-sudoedit-mode} manully if need.

@item
@strong{Epa enabled by default:}

Epa (EasyPG) was the emacs internal feature for auto encrypt and
decrypt gpg/pgp tool, @samp{entropy-emacs} enable it at emacs session
initial step by @code{(epa-file-enable)}.

@item
@strong{Kill ring browsing:}

Kill ring save the all yank strings into the ring likeqd list, emacs
support pasting the history yanking according to the ring's circular
turns.

Melpa package @samp{browse-kill-ring} was the extension which aimed to
provide the feature for browsing kill ring history in explicit way
with candidates choosing functional using emacs @code{completing-read}.
@end itemize

@node Font specific
@subsection Font specific

Emacs support multibyte fonts setting and the rich features for each
part of emacs face rendering corresponding aspects. @samp{entropy-emacs}'s
initial config file @samp{entropy-emacs-font-set.el} was used to provide
more beneficial way for specifying emacs font configuration.

Internally, emacs using a @samp{FONTSET} data structure to represent its
font founding mechanism to support the multi-language support for a
single lanuguage-environment. A FONTSET is a group of various font
families of various lanuage scripts so that a FONTSET can decoding any
charsets if set properly with unlimited FONT-SPECs (i.e. the emacs
internal font representation data structure).

Thus for, @samp{entropy-emacs} patch the emacs per-frame default FONTSET
with sets of FONT-SPECs to support CJK, LATIN, SYMBOL
simultaneously. We use the group font family data structer for
implementing that feature, variable
@samp{entropy/emacs-font-setting-enable} (see its docstring for more
details) did as that.

If @samp{entropy/emacs-font-setting-enable} is not used, you can set your
own emacs font configuration in @samp{custom.el}. But a variable
@samp{entropy/emacs-font-size-default} is always used in effective, it
controls the eemacs global font height affected for all windows in the
main frame whicn you focused on.

@node Major modes for programming
@section Major modes for programming

Most major-modes contained the basic coding experience as syntax
highlight and the 'xref' code defination jumping functional. Although
it's the basic which doesn't upper to full sensitively cheerful user
experience.

@samp{entropy-emacs} using dozen of melpa extensions to extending the
presented major modes' features for enhancing more and more modes
experience individually. The main extending purpose was sticking on
the coding completion, based on @uref{http://company-mode.github.io/, company-mode} which was the coding
completion framework for any scences. As well, eachs major modes
extending were including the coding interaction cases such as context
folding and expanding uppon the regions or parentheses, and even for
debug tool-chains.

@samp{entropy-emacs} treats emacs as the lightweight IDE (i.e. integrated
development environment), extended with third-party lanuage servers,
with the quickly ripened opensource lanugue protocol @uref{https://github.com/microsoft/language-server-protocol, Microsoft
language server} (LSP), we are trending to use the LSP as the IDE core
component, its powerful with unified crossplatform protocol defination
and ripened communitiy driven. But for those old IDE configuration
(i.e. individually un-unified code sever) were remained in
@samp{entropy-emacs} with just limited supplement.

The switcher for @samp{lsp} and the old IDE configuration is relying on
customized variable @samp{entropy/emacs-use-ide-type-for-MAJOR-MODE} whose
valid values are 'lsp or 'traditional, where the 'MAJOR-MODE' place is
wildcards like, which case that if you want to use a LSP ide type for
major-mode @samp{c-mode}, the corresponding customized variable is
@samp{entropy/emacs-use-ide-type-for-c-mode} and manually set it to
'traditional'. By default, we use LSP for all occasions.

Follow sections given the description for each major mode which have
been enhanced for those IDE features.

@menu
* C and C++::
* Php::
* Html and Css::
* Javascript::
* Web front-end realtime previewer::
* Python::
@end menu

@node C and C++
@subsection C and C++

Use ide type customized variable: @samp{entropy/emacs-use-ide-type-for-[c/c++]-mode}.

@multitable {aaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem @strong{IDE type}
@tab @strong{language server}
@tab @strong{completion support}
@tab @strong{xref-defination support}
@item lsp-mode
@tab @uref{https://clang.llvm.org/extra/clangd.html, clangd}
@tab yes
@tab yes
@item traditional
@tab @uref{https://github.com/Sarcasm/irony-mode, irony-mode}
@tab yes
@tab yes
@item
@tab
@tab
@tab
@end multitable

@itemize
@item
@strong{Lsp-mode for cland eemacs configuration:}

Common LSP configuration.

@item
@strong{irony-mode eemacs configuration:}

@enumerate
@item
Using @uref{https://github.com/Sarcasm/irony-mode, irony-mode} to giving the project code defination review and
jumping feature.

@item
Using @uref{https://github.com/randomphrase/company-c-headers, company-c-headers} to giving the project header file query
completions.
@end enumerate

@samp{irony-mode} based on the @emph{irony-server} which has been compiled for
w32 platform within @samp{entropy-emacs} (see project @uref{https://sourceforge.net/projects/entropy-emax64/, entropy-emax64} for
details), but needed compiling manually on linux with dependencies
installed e.g. cmake, clang @dots{} (We do not packing the server binary
on linux because for its platform across conflicts , thus x86 and
arm or other cpu platform can not using the same binary.)
@end itemize

@node Php
@subsection Php

Use ide type customized variable: @samp{entropy/emacs-use-ide-type-for-php-mode}.

@multitable {aaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem @strong{IDE type}
@tab @strong{language server}
@tab @strong{completion support}
@tab @strong{xref-defination support}
@item lsp-mode
@tab @uref{https://github.com/felixfbecker/php-language-server, php-language-server}
@tab yes
@tab yes
@item traditional ide
@tab @uref{https://github.com/xcwen/ac-php, ac-php}
@tab yes
@tab yes
@end multitable

@strong{Lsp-mode php-language-server eemacs configuration:}

Common LSP instruction.

@strong{Ac-php eemacs configuration:}

Php mode was derived from C-mode, similar syntax-table and grammer
styple so that the syntax highlight was not needed to extend.

The main extending for was coding completion, we using @samp{company-php}
for giving thus feature.

@node Html and Css
@subsection Html and Css

Use ide type customized variable:
@samp{entropy/emacs-use-ide-type-for-web-mode} and
@samp{entropy/emacs-use-ide-type-for-css-mode}.

emacs internal default web front-end major modes html and css mode are
used as basically with simple function interactively support, we use
melpa package @uref{http://web-mode.org, web-mode} for the enhancements for web technology coding
context.

web-mode provide sets of mordern features as for. Tag folding and
expanding with @uref{https://github.com/smihica/emmet-mode, emmet-mode}'s abbrevation tag editting, giving the more
sensitive web refer coding.

Our self built func @code{entropy/emacs-web-browse-web-buffer} can quickly
browse the current html page out of using external browser for
previewing as the way of quickly did.

Both of html and css buffer can be tidied up with conventionally code
style using @uref{https://github.com/yasuyk/web-beautify, web-beautify} package which required node-js can be
searched in PATH and the npm referred packages installed or using the
command @samp{lsp-format-buffer} when use eemacs IDE type of LSP for those
major-modes.

@multitable {aaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem @strong{IDE type}
@tab @strong{language server}
@tab @strong{completion support}
@tab @strong{xref-defination support}
@item lsp-mode
@tab @uref{https://github.com/vscode-langservers/vscode-html-languageserver, html}
@tab yes
@tab yes
@item traditional
@tab html: no
@tab yes (@uref{https://github.com/osv/company-web, company-web})
@tab no
@item
@tab css:  no
@tab yes (company-capf)
@tab no
@end multitable

@node Javascript
@subsection Javascript

Use ide type customized variable: @samp{entropy/emacs-use-ide-type-for-js2-mode}.

JS development major-mode @uref{https://github.com/mooz/js2-mode/, js2-mode} was the one for given such as repl
morden syntax highlighting feature for javascript coding which used in
@samp{entropy-emacs} for be replaced with origin @samp{js-mode}.

@multitable {aaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem @strong{IDE type}
@tab @strong{language server}
@tab @strong{completion support}
@tab @strong{xref-defination support}
@item lsp-mode
@tab @uref{https://github.com/theia-ide/typescript-language-server, typescript-language-server}
@tab yes
@tab yes
@item traditional
@tab @uref{https://github.com/ternjs/tern, tern}
@tab yes (@uref{https://github.com/ternjs/tern, company-tern})
@tab yes
@end multitable

@node Web front-end realtime previewer
@subsection Web front-end realtime previewer

@uref{https://github.com/netguy204/imp.el, impatient-mode} and @uref{https://github.com/skeeto/skewer-mode, skewer-mode} was two included melpa extension for
providing the web front-end realtime previewer feature.

@itemize
@item
@strong{skewer-mode:}

@samp{skewer-mode} provides js code snippet realtime evaluation feature,
it emulates the real-time evaluation mechanism upon emacs elisp
environment, using the way of the interaction of synchronizing with
external browser's internal javascript engine, evaluating the codes
snippet within current editting buffer. It support the repl by the
same way as well.

It's mechanism for:
@quotation
At first, daemon of one http server implemented by elisp programe
@uref{https://github.com/skeeto/emacs-http-server, simple-httpd} enabled for be as the interaction module with external
browser, then loading the js script for the server (as server instance
), as the same time, open external browser for listening changes of
the server mentioned before.

Later, each buffer modification will be sent to the server, and
external browser tracking the response.

@end quotation

Full process enable just hinting the command @code{run-skewer},
immediately then makeing your external browser open a newtab with
address @uref{http://127.0.0.1:8080/skewer/demo} , this page was the one
previewing all results generated by @samp{skewer-mode}.

@samp{skewer-mode} support css well, for css html and javascript, its
functionals are divided into three minor-modes individually and they
are list as below:

@example
The keybindings for evaluating expressions from emacs to the browser
are just like did that for Lisp modes. These are provided by the minor
mode skewer-mode.

* C-x C-e: Evaluate the form before the point and display the result
 in the minibuffer. If given a prefix argument, insert the result into
 the current buffer.

* C-M-x: Evaluate the top-level form around the point.

* C-c C-k: Load the current buffer.

* C-c C-z: Select the REPL buffer.


The result of the expression is echoed in the minibuffer.

Additionally, css-mode and html-mode get similar sets of bindings for
modifying the CSS rules and HTML on the current page.

CSS

* C-x C-e: Load the declaration at the point.
* C-M-x: Load the entire rule around the point.
* C-c C-k: Load the current buffer as a stylesheet.

HTML

* C-M-x: Load the HTML tag immediately around the point.

Note: run-skewer uses browse-url to launch the browser. This may
require further setup depending on your operating system and personal
preferences.
@end example
@end itemize


You can touching @samp{C-c C-z} to active repl for js within js2-mode
buffer.

@itemize
@item
@strong{impatient-mode:}

@samp{impatient-mode} named as the meaning with humorous as the read-time
previewing moods given, it was the one relative by @samp{skewer-mode}'s
region partitial previewing mechanism, it's full buffer real-time
previewer as for. The core purpose for is to monitoring the html
buffer modification and so. The same well as using the simple http
server as @samp{skewer-mode}, it need to manually adding the files in the
same folder of css or html files along into the server.

When one folder structer list as:
@example
~/:
 |____index.html
 |____index.css
@end example

Thus we can following few steps for previewing the @samp{index.html} and
it's css file by @samp{impatient-mode}, that's to say if you want the
index html file be rendered with all the references as above, you
need to manually adding them into server by call @code{impatient-mode}.

@enumerate
@item
enable internal web-server by @code{httpd-start}
@item
open @samp{index.html} and starting @samp{impatient-mode} and external
browser open link @uref{http://localhost:8080/imp/live/index.html/}
automatically at the same time.
@end enumerate

And now your index html file will be rendered real-time in this web
page. If you want to adding the css refer into, switching to the css
file buffer and executed above steps again with just replacing the
html file as instead of css file at the same meaning.

@strong{Limitations:}

All the linkage file must be under the same directory tree. Thus
@samp{impatient-mode} is just the one for html designation layout
developments, or for demo previewing.
@end itemize

@node Python
@subsection Python

Use ide type customized variable: @samp{entropy/emacs-use-ide-type-for-python-mode}.

We using emacs built-in major-mode @samp{python-mode} for coding python codes.

@multitable {aaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa} {aaaaaaaaaaaaaaaaaaaaaaaaa}
@headitem @strong{IDE type}
@tab @strong{language server}
@tab @strong{completion support}
@tab @strong{xref-defination support}
@item lsp-mode
@tab @uref{https://github.com/palantir/python-language-server, pyls}
@tab yes
@tab yes
@item traditional
@tab @uref{https://github.com/proofit404/anaconda-mode, anaconda-mode}
@tab yes (@uref{https://github.com/proofit404/anaconda-mode, company-anaconda})
@tab yes
@end multitable

@strong{python-mode eemacs specification}

By defautly, we using @samp{python3} be the primary python shell, that it
was the most recommendation today.

@node Packages enhancements and introduction
@section Packages enhancements and introduction

@menu
* Ivy and Helm::
* Emacs-W3m::
* Elfeed::
* Gnus::
@end menu

@node Ivy and Helm
@subsection Ivy and Helm

Ivy was emacs @samp{M-x} enhancements tool framework, it provides the
feature of listing candidates with extra functional supplied.

Ivy remap @samp{M-x} with @samp{swiper}, with the interactive interface
visualized as:

@example
+-----------------------------------+
| I                                 |
|                                   |
|                                   |
|                                   |
|                                   |
|                                   |
|                                   |
|                                   |
+-----------------------------------+
|Choose your candidates:            |
+-----------------------------------+
|candidates:                        |
|1.apple                            |
|2.banaa                            |
|3. ..........                      |
+-----------------------------------+
@end example

Aspect oriented for framework, ivy provides ability for building extra
extension based the query promting listing sytle as upon , sets of
presented extra functionas are collected in melpa package @samp{counsel}.

@samp{counsel} including commonly used tool e.g. @code{counsel-find-file}
replaced @code{find-file}, and more of the often used commands are
described as below.

@itemize
@item
@strong{counsel given for file based:}

@enumerate
@item
@samp{counsel-org group}

@enumerate
@item
counsel-org-goto: searching Org outlines, located quickly.

@item
counsel-org-goto-all: searching all org buffers listing
under current emacs session.
@item
counsel-org-capture: query for selecting org capture templates.

@item
counsel-org-entity: query for inserting entity char e.g. À ℘ δ π etc.
@end enumerate

@item
couinsel-yank-pop group: similiar as @code{browse-kill-ring}.

@item
counsel-recentf: query for selecting recent opened files.

@item
counsel-ibuffer: @samp{ibuffer} with ivy interface.

@item
counsel-bookmark: bookmark selecting extended with
@code{bookmark-bmenu-list}, as it's quickly view port.

@item
counsel-mark-ring: query selecting mark position.

@item
counsel-unicode-char: query insert unicode char with name
charset point, convention name, display etc.
(e.g. "00271D LATIN CROSS ✝")
@end enumerate

@item
@strong{counsel emacs utilities:}

@enumerate
@item
counsel-face: face information query for filter.

@item
counsel-set-variable: setting local variable by query prompt
@end enumerate

@item
@strong{counsel programming helper:}

@enumerate
@item
counsel-css: css mode css selector ivy list.

@item
counsel-colors-web: web mode color string visualized query prompting.

@item
counsel-git-log: query git log quickly.

@item
counsel-company: using ivy interface to show company backends
candidates.
@end enumerate

@item
@strong{ivy read action:}

Extra action supported within ivy interface, it called
@samp{ivy-read-action}, it has the built in ones and also can be
customized as extension ports.

Internal ivy-read-action has them:

@enumerate
@item
@samp{C-M m}

Repeately selecting candidates (if the caller supports this feature).

@item
@samp{C-M j}

Force executing operation with current input string.

origin RET key will cover current inputs with any matched
candidate shown with face @samp{ivy-current-match}, this command make
the whatever inputted as the chosen (for some @samp{require-match}
specified caller, this command will be hinted with an warning).

@item
@samp{C-c C-o}

Collected all current candidate into the temporary buffer for be
occurrence so.

This command is useful for user to display all matched (or all
candidates when no querying is happened) in one buffer with
action binded (may not when the caller is not defined by @samp{ivy} as
it is purely using @samp{completing-read}) in which case that we can
read, query or save the results.

@item
@samp{M-o}

Listing other specific extra actions.

This command was the dispatcher for caller specfied extra actions
and user specified ones, the defination former for thus can be
exhibited as one demo which @code{counsel-describe-face} coded for:
@lisp
(ivy-set-actions
 'counsel-describe-variable
 '(("I" counsel-info-lookup-symbol "info")
   ("d" counsel--find-symbol "definition")))
@end lisp

@item
@samp{C-o}

Show generally operation specifications of ivy for current
caller. Which is a @samp{ivy} defined @strong{hydra} dispatcher used to
charge the optional customizations for this ivy invocation.
@end enumerate
@end itemize


@uref{https://emacs-helm.github.io/helm/, Helm} was the another one extension similiar with what @samp{ivy} did, but
with more powerful. We do not using it by default because it's huge
size of source code which indicates its complication just in my sense
and most of new decades' emacsers. But we using other minor tool based
on it e.g. @uref{https://github.com/syohex/emacs-helm-ag, helm-ag} which binded to @samp{C-c j}.

@node Emacs-W3m
@subsection Emacs-W3m

Emacs internal browser @samp{eww} was pure and enough for simple text web
browing using as. we also combine @uref{https://github.com/emacs-w3m/emacs-w3m, emacs-w3m} into @samp{entropy-emacs} for
providing fully featured text based browser travelling experience.

The origin keybindings and UI default setting for emacs-w3m was minor
strange as so, we hacking thus for:

@itemize
@item
UI reconfiguration
@item
Quickly view current page with external browser by keybinding @samp{B}.
@item
Automatically proxy with specific rule setting.(using feature powerd
by @uref{https://github.com/c0001/entropy-proxy-url, entropy-proxy-url})
@end itemize

For using @samp{emacs-w3m} you need the external command line programe
@samp{w3m} installed, see the its home page @uref{http://w3m.sourceforge.net/}.

Type @samp{M-x w3m} to travelling for.

@node Elfeed
@subsection Elfeed

Did you thought about for feeding rss rely on emacs only?

Melpa package @uref{https://github.com/skeeto/elfeed, elfeed} given the try for. The only operation you need to
do is calling @samp{M-x elfeed} thus as.

Elfeed was the rss feeds viewing, management program written by purely
emacs lisp, the only alternative external dependence is @uref{https://github.com/curl/curl, curl}, which is
used for pushing the feeds retrieving task for emacs subprocess for
reducing emacs self performance consumption.

@samp{entropy-emacs} hacking on @samp{elfeed} for adding more conventional
features.

@itemize
@item
Search feeds according to feed title and tags.

@item
Filter feeds according to resources and tags.

@item
Auto rename feed-title with hyphenation '-'.

This is for fixing the problem by feed title name with space that
can not be detective by origin internal mechanism.

@item
Repeatly removing feeds. (using @samp{ivy} interface)

@item
Update feeds using proxy.
@end itemize

All the feeds filter can be reset with short cut @samp{S}.

@node Gnus
@subsection @strong{TODO} Gnus

For now, we just given @uref{https://www.gnus.org/, gnus} a simply try with the local
files/directories unified customization, by one custom variable
@samp{entropy/emacs-gnus-init-config}. See coding snippet for the details.

@node Emacs on windows
@section Emacs on windows

Emacs was originally built for GNU/Linux, compatible with UNIX-like
OS@. Windows port was built for be as the reason by:
@quotation
We support GNU Emacs on proprietary operating systems because we hope
this taste of freedom will inspire users to escape from them.

excerpt from @uref{https://www.gnu.org/software/emacs/manual/html_node/emacs/Microsoft-Windows.html#Microsoft-Windows, here}.

@end quotation

@strong{Taste} notice for, but more than this prudent meaning.

I thought the reason for 'taste' annotaion quoting for this as the
declaration was that WINDOWS was designed by the different tree fork
sibling as the rebeler against UNIX@. Thus the OS internal process
mechnism was not full compat with the origin emacs design conceptual.

But, actually I am one emacser port on w32. Mine experience was fully
sensitive acquiring the almost features covered as on linux, just with
some explicit non-compatible feature which came from the OS feature
tied on. One of them was POSIX shell interaction and the rest was some
feature's bug caused by the w32 api iteration.

Although, the hacking for emulating the whole linux emacs using
environment by us was hard and without robust guarantees, but I
thoughts following WINDOWS emacs using was enough for daily using just
with minor trouble for.

@menu
* Bash and unix tool chains for windows::
* Portable emacs environment on windows::
* Notice for key touching on windows::
@end menu

@node Bash and unix tool chains for windows
@subsection Bash and unix tool chains for windows

We using Msys2 as the bash shell emulator for emacs windows port, this
is also the wild used of other windows gui to do with. Msys2 was the
integrated project consists of cygwin and mingw, both of them are the
windows gnu tool chains and differences of whether abiding with the
POSIX rule.

For integrated Msys2 into emacs, was using the way for adding the
tool-chain path binding with emacs internal path variable, both from
the shell path detectived "PATH" obtained by @code{(getenv "PATH")} and the
@samp{exec-path}.

@node Portable emacs environment on windows
@subsection Portable emacs environment on windows

Emacs has the relative path specification variable
@samp{invocation-directory} and @samp{data-directory}, both of them are
internally built which can auto re-set before emacs started.

The portale of emacs config was depent on the config folder portable
refer setting, i.e. HOME path portale specification. You can using
those two variable to be the bridge to directed to the home path using
the elisp code illustrated as:
@lisp
(defvar device-root (concat (substring invocation-directory 0 -11) "Msys2/"))
(setenv "HOME" (expand-file-name (concat device-root "portable-HOME")))
@end lisp

As so, this demo can be extended for any portable path setting.

@node Notice for key touching on windows
@subsection Notice for key touching on windows

Emacs windows port distribution was built with mingw relied on msys2
toolchains, minor bugs was founded, the key touching bug especially.
@quotation
There's no key touching bug founded on WIN7, thus below description
was refer to WIN10.

@end quotation

On WIN10, the @samp{win} key was temporally frozen the other key taken up
when OS session recovery from screen lock state, this was the annoying
bug which caused by the new windows key chunks api refers, to recovery
this by touching @samp{win} key again.

@node Docs refers
@chapter Docs refers

@bye