#+title: entropy-counsel-stuffs
#+author: Entropy

This packages will provide your the ability for quickly searching
stuffs your gatherd in your own location.

* What is stuffs this case shown for?

Stuffs was the abstract for sth that be used for assembling into
completing for the unique thing which be can be used without any or
just a low using-threshold.

In this way, like books and source website can be stuffs , because you
can not using them for dealing with common actual task i.e. for daily
using for some goal. But stuff are more important for our life, the
reason for it was that any independant thing we used was the
combination of those stuffs.

So this package basic on package =entropy-open-with=, and the function
~browse-url~. The former was used to open local files like pdfs,
musics, videos within local mime relevant applications and the latter
was used to open url stuffs which foramt in local syle like
`127.0.0.1/index' for searching the local website you created or
tracked from website remained in you local web server doc container,
OFC, you also can using for web bookmarks .

The mainly core elements for you using this package was to create one
database file which maintained into one =Org= file, and can be both
with the manuly editting raw file or interactively adding records with
~ivy~ prompt.

The actual concept of this was to to using bookmarked mechanism for
recording or review the things your remained.

* Requirements

- entropy-common-library
- entropy-org-widget
- entropy-open-with
- ivy

Required package named with prefix =entropy-= was =entropy-emacs=
embedded self maintained package, you can retrieve them by accessing
those repository.

Required package =ivy= was elpa accredited third-party emacs extension
built by [[https://github.com/abo-abo][abo-abo]], you can download it from melpa directly.

* Installation 

It's recommended using =use-package= to config the initialize config
of this file as the code snippet below shown:

#+BEGIN_SRC emacs-lisp
  (use-package entropy-counsel-stuffs
    :load-path "path-to-your-loadpath"
    :bind (("C-M-<f12>" . entropy/cs-recorde-entry)
           ("C-<f12>" . entropy/cs-open-all))
    :commands (entropy/cs-filter-open
               entropy/cs-recorde-entry
               entropy/cs-converter
               entropy/cs-modifiy
               entropy/cs-delete))
#+END_SRC


There's none default keybindings, keybindings shown in the initialized
config snippet was my own config as is, you should change it to fit
for your habbits if it's messy your key sequences.

* Configuration

The only one thing you wish to initial setted was the customized
variable =entropy/cs-entry-recorde-file= which denoted as the stuffs
collection database mentioned in the preamble section. The value of it
was path string of the database org file.(the default value was
"~/Entropy-mini/20171116235728/org/bookmarks.org") 

By the way, while you calling any interaction func of this package
will check the database file if be existing as is, and auto create it
at the opposite, so you may not need to create the database file
manually unless you wish to located the database file to the specific
location.

* Database file content structer

Each stuffs recorded in thd database file was recognized as one org
file heading, and all its attribute were recorded as the properties
under the stuff heading entry.

The one stuff entry looks like the former shown as below:

#+BEGIN_SRC org
  ,* tile
  ,** heading 1
    :PROPERTIES:
    :CUSTOM_ID: 1234567890
    :CATEGORY: books
    :CSTYPE:   url
    :LOCATION: C:/temp/
    :END:
#+END_SRC 

*Introduction fo above tempalte:*

The title was indicated the top level 1st info of current database
brief description. 

Heading =heading 1= was one stuff entry recorde which has the the
attributes "custom_id","category","cstype","location" representing as
the heading properties key pair.

*For the attributes description individually:*

- CUSTOM_ID:

  Each stuff must has the unique identifier number sequence for as the
  implicit name flag for preventing the duplicated human readable
  nature language based name string occurrence, it can be setted
  manually when you manipulate the database raw file manually, it's
  recommended to setting this id sequence using emacs org-mode
  internal api ~org-id-new~ or using the bash script snippet:
  
  : cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 64 | head -n 1

- CATEGORY

  Each stuff entry could given the category as the group classifying
  orgnization based as for and each of them can have multi categories
  filtered of.

  The categories records string is seperated with semicolons for the
  multi-categories type, thus category string 'a;b;c' denoted that the
  stuff archived into category 'a,b,c' both of that. The designation
  concept for this was similar to blog site's post tag system, but
  warnning for that =entropy-counsel-stuff= have another type setting
  be for the tag post which using heading tag entry element of
  org-mode internal supporting with.

  Done with category inputting could completing by both of manually or
  query prompting way, the interaction dealing for adding or modifying
  stuff entry are the automatically trench.

- CSTYPE

  Stuff type attribute used for indicated local or on-line stuff
  location generally. This attribute used for stuff open backend to
  filter for the correct stuff open treatment, thus local file opened
  by searching for the local path, url stuff open with emacs internal
  or external web browser etc.

  Til now, there's just support two value =url= and =local= denoted as
  the it's literally meaning as is.

- LOCATION

  Stuff location specific string format with individual protocol
  string format e.g. 'file://xxxxxxxx' used for local file
  'https://xxxxxxxx' used for web urls. And now
  =entropy-counsel-stuffs= only support this two protocol string.
  
* Interactivation

=entropy-counsel-stuffs= using sets of interaction 'autoload' to
expose the user calling operation.

'Query open', 'Adding', 'Modification' operation were four main
operation in this case. All of them are designed with /query-prompt/
interaction based with ~completing-read~ or =ivy= emacs mordern
completion framework, thus you can work with it on the benefit way.

** Query open

Stuffs are usually have the dozen volumn counts stored in your local
database, this package designed with effective query filter for what
you looking for. Feature 'category' was the macro filter does for
located the range you care about and reducing the querying scope at
the initial state. the second(also the last) query was string matching.

*** Query with filter

Based on category orgnization, each stuff can be found in one specific
category query about, this suits for people forgotten the accurate
stuffs entry title string, with just the fuzzy concept about the query
target, thus the category was the implicit one leading your find what
you want.

Even that multi-categories supported, thus you may found single stuff
entry under various categories, this can help you given the
cross-relavant stuff management function , this is improtant because
of that tree style node orgnization was limited with it's single
direction less than the wide of network theory.

Function ~entropy/cs-filter-open~ gives the way for thus, calling it
for a try -v-

*** Query without filter

There's no needs to query stuff entry with category querying leading
for in some daily using situation and it's seems occurred
frequently. In this case you can calling func ~entropy/cs-open-all~
to query with all stuff entry candidates directly. This func was
suggested binding to key-sequence =<C-f12>=.

** Adding stuff

=entropy-counsel-stuffs= support adding stuff entry by the interaction
way manually with the =ivy= completing framework. All you need to do
it was just calling interactively function ~entropy/cs-recorde-entry~,
once while does it calling operation on it, you will done sets of
inputting sequenced on =cstype=, =category=, =customid=, =location=
properties mentioned on section [[Database file content structer][stuff-attributes]], after these
inputting done, the new stuff entry will be inserted into the database
file where variable =entropy/cs-entry-recorde-file= denoted as is.

As mentioned in section for previous sections, the inputting behaviour
of multi-categories was supported within new stuff entry adding
interaction process, with the method both of manually seperated
inputted string with semicolon or with candidates (match requiring)
selecting repeatly with ~ivy-call~ (binding with =ivy-minibuffer-map=
'C-M-m') and showing with the brief prompting string as: 

#+attr_org: :width 600px
#+attr_html: :width 600px
[[file:img/entropy-counsel-stuffs_repeatly-category-chosen_2019-01-20_01-29-53.png]]

As the beneficence for auto-generated entry id, there's no need to
given the inputting operation for manually dispaching new id string
for the new stuff entry.


** Modified stuff

The occurence for some embarrassments state while you want to change
one or sets of stuffs recorded information, you get the first reaction
for doing with raw database file editting manually. But there's the
readymade stuff modication interactivation function
~entropy/cs-modifiy~ for thus on. Calling it while you wish to. 

 
* Apis 

This package can be used as the fundametal library (or dependencies)
for other emacs packages' developments. 

Even though, this package gives the comprehensive independent
interaction functional experience, I setted the core library of it as
be the API type what expected for other development case.

** Database pointer

As the narration within above context, the database org file was the
fundamental of calling-premise, the package developer can
local-binding with =let= former for redirected it's value to the
specified location as needed even if user customized value of this in
the global closure has gotten off.

Thus we can give out for one function whose aim for openning dozen of
database file with user selected by the completion interaction
interface:

#+BEGIN_SRC emacs-lisp
  (let ((stuff_files (list "/home/temp/my-stuffs01.org"
                          "/home/temp/my-stuffs02.org"
                          "/home/temp/my-stuffs03.org"))
        chosen_file)
    (setq chosen_file (completing-read "Select stuff collection: "
                                       stuff_files nil
                                       :require-match))
    (let ((entropy/cs-entry-recorde-file chosen_file)
          (entropy/cs-cached-alist  nil))
      (entropy/cs-open-all)))
#+END_SRC 

With the obviously another notice following the 'pointer' file let
form, cache list =entropy/cs-cached-alist= must be cleaned out before
the func =entropy/cs-open-all= using. There what you must notice that
variabnle =entropy/cs-cached-alist= was the second part of the
'database pointer' for most =entropy-counsel-stuffs= apis, that the
way that the 'file pointer' for database cache retrieving and stuff
CRUD based, and the 'cache pointer' for database query filter for.

Almost internal api's main function based only on this two variables,
it's that you should always forming them in the heading of the current
'let' form.



** Database caching

While you've get the pointer file with 'let' form, commonly used with
this was for transfer the file content to the =elisp= data structer
specified basic on the designation of =entropy-counsel-stuffs= which
almost one nested 'alist' type form as:

#+BEGIN_SRC elisp
  (list
   (("ITEM" "xxx")
    ("CATEGORY" "xxx")
    ("CUSTOM_ID" "xxx")
    ("CSTYPE" "xxx")
    ("LOCATION" "xxx"))
   .
   .
   .)
#+END_SRC 

This cache list getted by func ~entropy/cs-get-cached-list~ without
any arguments need for inputting in, as the narratation that it
retrieving the current database file as the operation object where be
now just specified in your 'let' form.

OFC, you don't need to built one data structer parsing manually
against to this returned cache nested alist, func
~entropy/cs-filter-open~ (no args required) with the temporarily
sticking variable =entropy/cs-cached-alist= whose value must
retrieving by the cache getting func ~entropy/cs-get-cached-list~.


Demo:
#+BEGIN_SRC elisp
  (let ((entropy/cs-entry-recorde-file "xxxx")
        (entropy/cs-cached-alist (entropy/cs-get-cached-list)))
    (entropy/cs-filter-open))
#+END_SRC


The pointer workflow's diagram:

#+BEGIN_EXAMPLE
                      -----------------------
                     ( database-file         )
                      ----------+------------
                                |
                                |
                                v
                      +----------------------+
                      | get cache func       |
                      |                      |
                      +---------+------------+
                                |
                                |
                                |
                                v
                       -------------------
                      ( cache nested alist)
                       ---------+---------
                                |
                                |
                                v
                      +----------------------+
                      | filter query func    |
                      |                      |
                      +----------------------+

#+END_EXAMPLE





* COMMENT Local variables
# Local Variables:
# fill-column: 70
# org-adapt-indentation: nil
# org-download-image-dir: "./img/"
# eval: (auto-fill-mode)
# End:
