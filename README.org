# Local Variables:
# fill-column: 70
# org-adapt-indentation: nil
# org-download-image-dir: "./img/"
# eval: (auto-fill-mode)
# End:
#+title: entropy-epub2org
#+author: Entropy

For emacs user, the native vision of the getting style of reading
ebooks was originally tends to the method which be based on emacs it
self. For this pure and fully power imagination, I thought about sets
of hacking methods, through the way of 'sh-render' each xml or html
file within ebook as the melpa package [[https://github.com/wasamasa/nov.el][nov.el]] does, or using convert
way for as that transfer each ebook's internal ebook page to org
file. Obviously, the first one have the exits extension does, thus
this package was serving as the latter goal.  


Although kinds of ebook wrapper format are popular covering the word,
e.g. epub, awz3, mob ..., there's just the wrapper =epub= gets the
free for. Thus this package only given the try for converting the
epub format ebook to Org files collection ([[https://orgmode.org/][Org]] was the most popular
rich plain text format using in emacs).



=entropy-epub2org= using four steps to process the convertting
procedure:

1) Unzip the epub file to the folder archived with sets of webpages
   which were the main contents host files.

2) Parsing the index part tree into org files.

3) Convert all content carrier file into org files named as is.

4) Tidy up all converted org files into the normal org context format.


* Dependencies 

this package depends on some external cli dependencies:
- [[https://pandoc.org/][pandoc]]
- unzip
- dos2unix

Above two external cli tool unzip and dos2unix were common embedded
into various linux distribution, if not as, you should download them
using dist's package managements tool from the corresponding package
repository or from the DVD iso.

For WINDOWS platform, I suggested using Msys2 to be the GNU
environment emulator which commonly embedded unzip and dos2unix as
well into it's installation, if not using Msys2's package management
=pacman= to install them.

Pandoc was cross-platform tool using for providing various file type
converted each ohter, as thus support webpage source file converted
into Org file. In generally case that you should download and install
it manually from it's official website (mentioned in above list).


* Requirements

- entropy-common-library
- entropy-common-library-const
- entropy-unfill
- org
- files

All the library named using the prefix =entropy-= was embedded into
[[https://github.com/c0001/entropy-emacs][entropy-emacs]], you can find them there and then download it into your
load path.

* Installation

Just require it as:
: (require 'entropy-epub2org) 

* Interaction

=entropy-epub2org= was easy to start it with calling only one func
~entropy/ep2o-dispatcher~ which one shabby(currently simplify used as)
and enough for walking through all the functionally.

This func was interactively only for as. The once you call it, it
prompt you to choose the ebook location which will be chosen about,
and then unzip it for following steps processing mentioned in the
preamble.

Just try to calling it as the first experience ^^:)

* Modification before/after converting

For generally attempts for, not all content transfer from ebook source
to org format were comprehensively as what be along with your
expection. In this case, you wish to re-converted them agian for using
some modification rule using for ~entropy/ep2o-tidy-up-all-org-files~
which was the core tidy func using in step 'tidy up', of cousrse you
can use hook =entropy/ep2o-tidy-hook= to retry as the yet another way.

The core aspects of 'tidy up' procedure was searching replacing the
unexpected converted content into the expected one following the
regexp rule list =entropy/ep2o-replace-rule-alist= whose each element
was the cons whose the car was the unexpected thing regexp matching
for, and the cdr otherwise. =entropy/ep2o-replacing-rule-alist= have
the default value setted for commonly useing in the first converted
processing but was absolutely limited of be that can not do with
widely unexpected occurrence, thus you can order extra rules by
~add-to-list~ as is for responding to the customized way. This
paragraph gives the way for ordering the specified modification before
converting.

But as the human's imagination limitation, thus you couldn't get the
comprehensive looking for all the modification cases, you need to make
the modification process after the intial converting for generally
speaking. In this case you should using func
~entropy/ep2o-src-adjusting-manually~ to modify the rest unexpected
thing have got. all you need was for inputting extra searching
replacing rule set once or repeatly for as with prompting it's
interface, thus til the state expected by your self.




