# Local Variables:
# fill-column: 70
# org-adapt-indentation: nil
# org-download-image-dir: "./img/"
# eval: (auto-fill-mode)
# End:
#+title: entropy-open-with
#+author: Entropy

Open files with external executable applications on emacs interface. 

There's times for emacer try their best-efforts for dealing all the
operations within emacs only, but I thought about that this was not
sticked enough for daily emacs experience that's most of common
emacser prefer to do some task emacs not be good at with and using
external application rather than gaze at the lagging for thus the
procedure do with elisp, on the purpose for some ultra emacser does
said previous.

This package given the ability what file openning with wide customized
external applications according to the filename extension.

* Installation

Just requiring the file [[file:entropy-open-with.el][entropy-open-with.el]]  using:
: (require 'entropy-open-with)

Then bind key for func ~entropy/open-with-dired-open~ and
~entropy/open-with-buffer~ for suggested keybindings =C-M-return= and
=C-M-1= respectively.

Before doing the above requiring operation, remember to adding this
package to the load-path.

Or if you using [[https://github.com/jwiegley/use-package][use-pacage]] package management macro, you could doing
as below:
#+BEGIN_SRC emacs-lisp
  (use-package entropy-open-with
    :ensure nil
    :load-path "path-to-this-package"
    :commands (entropy/open-with-dired-open
               entropy/open-with-buffer)
    :bind (("C-M-1" . entropy/open-with-buffer))
    :init
    (with-eval-after-load 'dired
      (define-key dired-mode-map 
        (kbd "<C-M-return>") 'entropy/open-with-dired-open)))
#+END_SRC

* Configuratioin

The core configuration for this package's customized refers was based
on the one customized variable =entropy/open-with-type-list= which
indicated that you can specify group of filename extension name of
regexp expression with the corresponding external application forms as
below:

#+BEGIN_SRC elisp
  '(((\"html\" \"pdf\" \"xml\" \"php\" \"md\" \"markdown\")
     \"a:/PortableApps/FirefoxPortable/FirefoxPortable.exe\" file \"-new-tab\")
    ((\"mp3\" \"mp4\" \"mkv\" \"rmvb\" \"wmv\" \"flv\" \"avi\")
     \"a:/PortableApps/MPC-HCPortable/MPC-HCPortable.exe\" quote nil)
    ((\"c\")
     \"a:/PortableApps/codeblocks/bin/codeblocks.exe\" quote nil))
#+END_SRC

Each element of this list consists of three subjects:

1) *extension regexp strings list*

   Regexp strings match for specified filename extension can not be
   include extension dot prefix, thus "\.pdf" was ineffectual, using
   "pdf" instead.

   Group extensions match was supported as the benefit way for reducing
   config literal context length for the case for which application can
   be calling by dealing with multi file types, e.g. =firefox= can be
   used both of html file open and pdf file as so.

2) *External application path string*

   Called of application's absolute path. 

3) *Command line filaname transfer heading type*
  
   For some external application's URI args request as that file name
   must be concated with the special head prefix, e.g. for web browser
   that the local page file command line arg must have the prefix
   "file://", this subject given for thus as. Type was symbol or
   function, see below list for details:

   - 'file' method:

     Most of web browser can not use the local file path string as
     the file url argument in case of that the path string contained
     non-ascii characters such as symbol or cjk as for. In this case,
     using file protocol hexified string  as argument is wise choice.

     This transform firstly hexifies the whole local file path string
     and then adding the \"file:///\" protocol prefix string ahead of
     it.

   - 'quote' method:

     It's the most common decoration for commanline arguments, using
     double quotation char pair.

   - nil, passing origin path string to process.

   - Arbitrary function self specified, requesting one arg, the file path.  
 
4) *command argument string*

   Argumet is the concated command arguments string, the single string
   type.

* Interaction

- *Func:* ~entropy/open-with-interactively~

  Manually choose file be opened later with specific external
  applications query from list =entropy/open-with-type-list=, gives
  the file candidates query filter prompt powered by [[https://github.com/abo-abo/swiper][ivy]] framework.

- *Func:* ~entropy/open-with-dired-open~
  
  Calling external application to open marked files in dired-mode.

- *Func:* ~entropy/open-with-buffer~

  Calling external applications to open current buffer chained file. 


All functions above mentioned was given as the interactive function
for as so. You can binding them to your key-map along with your habits
or obey the previous installation init setup.


* Apis 

=entropy-open-with= was the minor tool for just giving fiews useful
api functions:

+ Func ~entropy/open-with-match-open~ 

  This func was given the simple way for query input filename's
  corresponding 'open-with' type and then opened it immediately with
  specific external application.

  It's arg was one list consists of filenames (path strings), thus
  multi files 'open-with' was supported.

+ Func ~entropy/open-with-port~

  This func given the try for open single file with 'open-with' or
  using internal emacs openning method.

  This func compensates the missing port of func
  ~entropy/open-with-match-open~ procedure which can open url(web
  link) using external application that original mechanism just allow
  exists local file matched with, means that origin one can not
  distinguish web link because of that it's do not has any mime
  extensions.

  Arguments:

  - Force one: interact

    This arguments was forcefully required by calling with as, it
    denoted whether let user manually choose file for 'open-with'
    for. 

  - optionals: 1) filename      2) inemacs

    These two args are optionally, =filename= using the case just when
    the forced arg =interact= are nil, it's used for the case while
    developer want to calling it just in elisp situation.

    The other one =inemacs= gives the try for open specific file in
    emacs method.
  
*  Notice    

For current implementation, this package just whole implemented fully
on windows platform, darwin and linux are using ~shell-quote-argument~
and ~xdg-open~ routines respectively for as Thus.

*Limitation on windows platform:*

In windows, the decoding method was using the one called =code pages=
which not compatible with UNIX-LIKE platform which also using one
coding method for all cli-transfer with. That the problem occured that
for that emacs-windows-port can not decoding unicode cli-args for the
subprocess with properly processing for.

In =entropy-open-with= interal mechnism, because of that it using
~w32-shell-execute~ as the windows port corresponding subjects core
func, unicode file name was not supported excluding the situation
until your current code page can be fully decoding the inputting
filename as so.

This imperfection was the emacs windows port primary implementation
state, which was referenced to the gnu-emacs mailing list: [[https://lists.gnu.org/archive/html/emacs-devel/2016-01/msg00406.html][here]].

[2019-05-17 Fri 06:08:49]

#+BEGIN_QUOTE
Now, if you are using the latest version of win10 (any version upper
than 1803), you could enable the beta optional setting for globally
=utf-8= capability in the =language&region= config panel.
#+END_QUOTE


